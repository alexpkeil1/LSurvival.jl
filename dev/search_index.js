var documenterSearchIndex = {"docs":
[{"location":"parametric/#Parametric-survival/risk-estimation-with-Weibull-AFT-models","page":"Parametric survival analysis with AFT models","title":"Parametric survival/risk estimation with Weibull AFT models","text":"","category":"section"},{"location":"parametric/#Weibull-accelerated-failure-time-model","page":"Parametric survival analysis with AFT models","title":"Weibull accelerated failure time model","text":"","category":"section"},{"location":"parametric/","page":"Parametric survival analysis with AFT models","title":"Parametric survival analysis with AFT models","text":"cd(\"docs/src/fig/\")\nusing Random, LSurvival, Distributions, LinearAlgebra, Plots\n\n# generate some data under a discrete hazards model\n id, int, out, data = LSurvival.dgm(MersenneTwister(1212), 1000, 20)\n\ndata[:, 1] = round.(data[:, 1], digits = 3)\nd, X = data[:, 4], data[:, 1:3]\nwt = rand(MersenneTwister(1212), length(d)) # random weights just to demonstrate usage\n\n\n# Fit a Cox model with `Tables.jl` and `StatsAPI.@formula` interface (similar to GLM.jl)\ntab = (id=id, in = int, out = out, d=d, x=X[:,1], z1=X[:,2], z2=X[:,3], wts=wt) # can also be a DataFrame from DataFrames.jl\nweibullfit = survreg(@formula(Surv(in, out, d)~x+z1+z2), tab, wts=tab.wts, dist=LSurvival.Weibull())","category":"page"},{"location":"parametric/","page":"Parametric survival analysis with AFT models","title":"Parametric survival analysis with AFT models","text":"Output:","category":"page"},{"location":"parametric/","page":"Parametric survival analysis with AFT models","title":"Parametric survival analysis with AFT models","text":"Maximum likelihood estimates (alpha=0.05):\n────────────────────────────────────────────────────────────────────────\n                   Est     StdErr        LCI        UCI       Z  P(>|Z|)\n────────────────────────────────────────────────────────────────────────\n(Intercept)   2.92482   0.0808023   2.76645    3.08319    36.20   <1e-99\nx            -1.50998   0.135432   -1.77543   -1.24454   -11.15   <1e-99\nz1           -0.072211  0.106681   -0.281301   0.136879   -0.68   0.4985\nz2           -1.08864   0.0906976  -1.2664    -0.910874  -12.00   <1e-99\nlog(Scale)   -0.223338  0.0368294  -0.295522  -0.151153   -6.06   <1e-08\n────────────────────────────────────────────────────────────────────────\nWeibull distribution\nLog-likelihood (full): -1222.58\nLog-likelihood (Intercept only):  -1356.2\nLRT p-value (X^2=267.23, df=3): 0\nSolver iterations: 15","category":"page"},{"location":"parametric/#Comparing-Weibull-AFT-and-Cox-model-results","page":"Parametric survival analysis with AFT models","title":"Comparing Weibull AFT and Cox model results","text":"","category":"section"},{"location":"parametric/","page":"Parametric survival analysis with AFT models","title":"Parametric survival analysis with AFT models","text":"For the Weibull distribution, AFT model and Cox model results can be compared directly by converting AFT estimates to hazard ratios","category":"page"},{"location":"parametric/","page":"Parametric survival analysis with AFT models","title":"Parametric survival analysis with AFT models","text":"coxfit = coxph(@formula(Surv(in, out, d)~x+z1+z2), tab, ties = \"efron\", wts = wt, id = ID.(tab.id))","category":"page"},{"location":"parametric/","page":"Parametric survival analysis with AFT models","title":"Parametric survival analysis with AFT models","text":"Output:","category":"page"},{"location":"parametric/","page":"Parametric survival analysis with AFT models","title":"Parametric survival analysis with AFT models","text":"Maximum partial likelihood estimates (alpha=0.05):\n───────────────────────────────────────────────────────────\n      ln(HR)    StdErr        LCI       UCI      Z  P(>|Z|)\n───────────────────────────────────────────────────────────\nx   1.78123   0.181734   1.42504   2.13742    9.80   <1e-99\nz1  0.109247  0.133533  -0.152473  0.370968   0.82   0.4133\nz2  1.59741   0.10216    1.39718   1.79764   15.64   <1e-99\n───────────────────────────────────────────────────────────\nPartial log-likelihood (null): -2460.82\nPartial log-likelihood (fitted): -2314.18\nLRT p-value (X^2=293.28, df=3): 0\nNewton-Raphson iterations: 6","category":"page"},{"location":"parametric/","page":"Parametric survival analysis with AFT models","title":"Parametric survival analysis with AFT models","text":"Convert the AFT model parameters to hazard ratios to compare (note that this conversion is not possible for all parametric survival distributions).","category":"page"},{"location":"parametric/","page":"Parametric survival analysis with AFT models","title":"Parametric survival analysis with AFT models","text":"scale = exp(weibullfit.P._S[1])\naftparms = coef(weibullfit)[2:end]\nparmhrs = - aftparms ./ scale\nhcat(coef(coxfit), parmhrs)","category":"page"},{"location":"parametric/","page":"Parametric survival analysis with AFT models","title":"Parametric survival analysis with AFT models","text":"Output: The first column is ln(HR) estimate from a Cox model, and the second is from the Weibull model","category":"page"},{"location":"parametric/","page":"Parametric survival analysis with AFT models","title":"Parametric survival analysis with AFT models","text":"3×2 Matrix{Float64}:\n 1.78123   1.88785\n 0.109247  0.0902812\n 1.59741   1.36106","category":"page"},{"location":"parametric/#Visualizing-the-distributions,-probability-density","page":"Parametric survival analysis with AFT models","title":"Visualizing the distributions, probability density","text":"","category":"section"},{"location":"parametric/","page":"Parametric survival analysis with AFT models","title":"Parametric survival analysis with AFT models","text":"using Plots\n\naftdist(weibullfit, label=\"X=0, Z1=0, Z2=0\", title=\"Weibull distribution\")\n# for specific covariate levels, include a 1.0 for the intercept\naftdist!(weibullfit, covlevels=[1.0, 1.0, 1.0, 1.0], color=\"red\", label=\"X=1, Z1=1, Z2=1\", npoints=300)\nsavefig(\"weibull_pdf.svg\")","category":"page"},{"location":"parametric/","page":"Parametric survival analysis with AFT models","title":"Parametric survival analysis with AFT models","text":"(Image: Weibull-density)","category":"page"},{"location":"parametric/#Visualizing-the-distributions,-survival-distribution","page":"Parametric survival analysis with AFT models","title":"Visualizing the distributions, survival distribution","text":"","category":"section"},{"location":"parametric/","page":"Parametric survival analysis with AFT models","title":"Parametric survival analysis with AFT models","text":"aftdist(weibullfit, type=\"surv\", label=\"X=0, Z1=0, Z2=0\", title=\"Weibull distribution\")\n# for specific covariate levels, include a 1.0 for the intercept\naftdist!(weibullfit, type=\"surv\", covlevels=[1.0, 1.0, 1.0, 1.0], color=\"red\", label=\"X=1, Z1=1, Z2=1\")\nsavefig(\"weibull_surv.svg\")","category":"page"},{"location":"parametric/","page":"Parametric survival analysis with AFT models","title":"Parametric survival analysis with AFT models","text":"(Image: Weibull-survival)","category":"page"},{"location":"parametric/#Visualizing-the-distributions,-hazard-function","page":"Parametric survival analysis with AFT models","title":"Visualizing the distributions, hazard function","text":"","category":"section"},{"location":"parametric/","page":"Parametric survival analysis with AFT models","title":"Parametric survival analysis with AFT models","text":"aftdist(weibullfit, type=\"haz\", label=\"X=0, Z1=0, Z2=0\", title=\"Weibull distribution\")\n# for specific covariate levels, include a 1.0 for the intercept\naftdist!(weibullfit, type=\"haz\", covlevels=[1.0, 1.0, 1.0, 1.0], color=\"red\", label=\"X=1, Z1=1, Z2=1\", npoints=300)\nsavefig(\"weibull_haz.svg\")","category":"page"},{"location":"parametric/","page":"Parametric survival analysis with AFT models","title":"Parametric survival analysis with AFT models","text":"(Image: Weibull-haz)","category":"page"},{"location":"parametric/#Visualizing-the-distributions,-risk-function","page":"Parametric survival analysis with AFT models","title":"Visualizing the distributions, risk function","text":"","category":"section"},{"location":"parametric/","page":"Parametric survival analysis with AFT models","title":"Parametric survival analysis with AFT models","text":"aftdist(weibullfit, type=\"risk\", label=\"X=0, Z1=0, Z2=0\", title=\"Weibull distribution\")\n# for specific covariate levels, include a 1.0 for the intercept\naftdist!(weibullfit, type=\"risk\", covlevels=[1.0, 1.0, 1.0, 1.0], color=\"red\", label=\"X=1, Z1=1, Z2=1\", npoints=300)\nsavefig(\"weibull_risk.svg\")","category":"page"},{"location":"parametric/","page":"Parametric survival analysis with AFT models","title":"Parametric survival analysis with AFT models","text":"(Image: Weibull-risk)","category":"page"},{"location":"parametric/#Other-distributions","page":"Parametric survival analysis with AFT models","title":"Other distributions","text":"","category":"section"},{"location":"parametric/#Exponential","page":"Parametric survival analysis with AFT models","title":"Exponential","text":"","category":"section"},{"location":"parametric/","page":"Parametric survival analysis with AFT models","title":"Parametric survival analysis with AFT models","text":"Note that the exponential fit assumes a constant hazard.","category":"page"},{"location":"parametric/","page":"Parametric survival analysis with AFT models","title":"Parametric survival analysis with AFT models","text":"expfit = survreg(@formula(Surv(in, out, d)~x+z1+z2), tab, wts=tab.wts, dist=LSurvival.Exponential())\naftdist(expfit, type=\"haz\", label=\"X=0, Z1=0, Z2=0\", title=\"Exponential distribution\")\n# for specific covariate levels, include a 1.0 for the intercept\naftdist!(expfit, type=\"haz\", covlevels=[1.0, 1.0, 1.0, 1.0], color=\"red\", label=\"X=1, Z1=1, Z2=1\")\nsavefig(\"exponential_haz.svg\")","category":"page"},{"location":"parametric/","page":"Parametric survival analysis with AFT models","title":"Parametric survival analysis with AFT models","text":"(Image: exponential)","category":"page"},{"location":"parametric/","page":"Parametric survival analysis with AFT models","title":"Parametric survival analysis with AFT models","text":"Output:","category":"page"},{"location":"parametric/","page":"Parametric survival analysis with AFT models","title":"Parametric survival analysis with AFT models","text":"Maximum likelihood estimates (alpha=0.05):\n──────────────────────────────────────────────────────────────────────\n                   Est    StdErr        LCI       UCI       Z  P(>|Z|)\n──────────────────────────────────────────────────────────────────────\n(Intercept)   2.95353   0.100392   2.75677    3.15029   29.42   <1e-99\nx            -1.55072   0.16808   -1.88015   -1.22129   -9.23   <1e-99\nz1           -0.082459  0.133349  -0.343818   0.1789    -0.62   0.5363\nz2           -1.36337   0.101441  -1.5622    -1.16455  -13.44   <1e-99\n──────────────────────────────────────────────────────────────────────\nExponential distribution\nLog-likelihood (full): -1239.09\nLog-likelihood (Intercept only):  -1359.4\nLRT p-value (X^2=240.61, df=3): 0\nSolver iterations: 14","category":"page"},{"location":"parametric/#Log-normal","page":"Parametric survival analysis with AFT models","title":"Log-normal","text":"","category":"section"},{"location":"parametric/","page":"Parametric survival analysis with AFT models","title":"Parametric survival analysis with AFT models","text":"# note this model runs into convergence issues in these data\n    #lognormalfit = survreg(@formula(Surv(in, out, d)~x+z1+z2), tab, wts=tab.wts, dist=LSurvival.Lognormal())\n\n# Here are results from a simpler model\ndat1 = (time = [1, 1, 6, 6, 8, 9], status = [1, 0, 1, 1, 0, 1], x = [1, 1, 1, 0, 0, 0])\nlognormalfit = survreg(@formula(Surv( time, status)~x), dat1, dist=LSurvival.Lognormal())\naftdist(lognormalfit, type=\"haz\", label=\"X=0\", title=\"Log-normal distribution\")\naftdist!(lognormalfit, type=\"haz\", covlevels=[1.0], color=\"red\", label=\"X=1\")\nsavefig(\"lognormal_haz.svg\")","category":"page"},{"location":"parametric/","page":"Parametric survival analysis with AFT models","title":"Parametric survival analysis with AFT models","text":"(Image: log-normal)","category":"page"},{"location":"parametric/","page":"Parametric survival analysis with AFT models","title":"Parametric survival analysis with AFT models","text":"Output: ","category":"page"},{"location":"parametric/","page":"Parametric survival analysis with AFT models","title":"Parametric survival analysis with AFT models","text":"Maximum likelihood estimates (alpha=0.05):\n─────────────────────────────────────────────────────────────────────\n                   Est    StdErr       LCI        UCI      Z  P(>|Z|)\n─────────────────────────────────────────────────────────────────────\n(Intercept)   2.20995   0.40358    1.41895   3.00095    5.48   <1e-07\nx            -1.26752   0.585011  -2.41412  -0.120918  -2.17   0.0303\nlog(Scale)   -0.445615  0.342319  -1.11655   0.225318  -1.30   0.1930\n─────────────────────────────────────────────────────────────────────\nLognormal distribution\nLog-likelihood (full): -10.4662\nLog-likelihood (Intercept only): -12.9106\nLRT p-value (X^2=4.89, df=2): 0.086774\nSolver iterations: 9","category":"page"},{"location":"parametric/#Gamma","page":"Parametric survival analysis with AFT models","title":"Gamma","text":"","category":"section"},{"location":"parametric/","page":"Parametric survival analysis with AFT models","title":"Parametric survival analysis with AFT models","text":"gammafit = survreg(@formula(Surv(in, out, d)~x+z1+z2), tab, wts=tab.wts, dist=LSurvival.Gamma())\naftdist(gammafit, type=\"haz\", label=\"X=0, Z1=0, Z2=0\", title=\"Gamma distribution\")\n# for specific covariate levels, include a 1.0 for the intercept\naftdist!(gammafit, type=\"haz\", covlevels=[1.0, 1.0, 1.0, 1.0], color=\"red\", label=\"X=1, Z1=1, Z2=1\")\nsavefig(\"gamma_haz.svg\")","category":"page"},{"location":"parametric/","page":"Parametric survival analysis with AFT models","title":"Parametric survival analysis with AFT models","text":"(Image: gamma)","category":"page"},{"location":"parametric/","page":"Parametric survival analysis with AFT models","title":"Parametric survival analysis with AFT models","text":"Output: ","category":"page"},{"location":"parametric/","page":"Parametric survival analysis with AFT models","title":"Parametric survival analysis with AFT models","text":"Maximum likelihood estimates (alpha=0.05):\n─────────────────────────────────────────────────────────────────────────\n                    Est     StdErr        LCI        UCI       Z  P(>|Z|)\n─────────────────────────────────────────────────────────────────────────\n(Intercept)   2.43748    0.0743159   2.29182    2.58313    32.80   <1e-99\nx            -1.49903    0.134053   -1.76176   -1.23629   -11.18   <1e-99\nz1           -0.0770725  0.137475   -0.346519   0.192374   -0.56   0.5751\nz2           -1.12406    0.0256118  -1.17425   -1.07386   -43.89   <1e-99\nκ             0.410826   0.0436605   0.325253   0.496399    9.41   <1e-99\n─────────────────────────────────────────────────────────────────────────\nGamma distribution\nLog-likelihood (full): -1219.09\nLog-likelihood (Intercept only): -1352.33\nLRT p-value (X^2=266.48, df=3): 0\nSolver iterations: 21","category":"page"},{"location":"parametric/","page":"Parametric survival analysis with AFT models","title":"Parametric survival analysis with AFT models","text":"Notes: analytic gradients and Hessian matrixes are not available for this distribution, so the solver uses finite differencing, which can make this model considerably slower to fit than alternative models.","category":"page"},{"location":"parametric/#Generalized-gamma","page":"Parametric survival analysis with AFT models","title":"Generalized gamma","text":"","category":"section"},{"location":"parametric/","page":"Parametric survival analysis with AFT models","title":"Parametric survival analysis with AFT models","text":"ggammafit = survreg(@formula(Surv(in, out, d)~x+z1+z2), tab, wts=tab.wts, dist=LSurvival.GGamma())\n#ggammafit = survreg(@formula(Surv(in, out, d)~x+z1+z2), tab, wts=tab.wts, dist=LSurvival.GGamma(), verbose=true) #see convergence issue\nggammafit2 = survreg(@formula(Surv(in, out, d)~x+z1+z2), tab, wts=tab.wts, dist=LSurvival.GGamma(), start=zeros(6))\n#simpler fit\n    rng = MersenneTwister(121)\n    n = 1000\n    x = rand(rng, [0,1], n)\n    wtab = (\n      t = [LSurvival.randweibull(rng, exp(1), exp((1-x[i]))) for i in 1:n],\n      d = rand(rng, [0,1], n),\n      x = x\n    )\n\nggammafit2 = survreg(@formula(Surv(t, d)~x), wtab, dist=LSurvival.GGamma())\naftdist(ggammafit2, type=\"haz\", label=\"X=0\", title=\"Generalized gamma distribution\")\naftdist!(ggammafit2, type=\"haz\", covlevels=[1.0], color=\"red\", label=\"X=1\")\nsavefig(\"gengamma_haz.svg\")","category":"page"},{"location":"parametric/","page":"Parametric survival analysis with AFT models","title":"Parametric survival analysis with AFT models","text":"(Image: generalized-gamma)","category":"page"},{"location":"parametric/","page":"Parametric survival analysis with AFT models","title":"Parametric survival analysis with AFT models","text":"Output: ","category":"page"},{"location":"parametric/","page":"Parametric survival analysis with AFT models","title":"Parametric survival analysis with AFT models","text":"┌ Warning: Optimizer reports model did not converge. Gradient: [-0.30185255746883194, -92.76305273476676, -12.51874622578631]\n└ @ LSurvival ~/.julia/packages/LSurvival/LckPM/src/parsurvival.jl:454\n\nMaximum likelihood estimates (alpha=0.05):\n─────────────────────────────────────────────────────────────────────────\n                    Est     StdErr        LCI        UCI       Z  P(>|Z|)\n─────────────────────────────────────────────────────────────────────────\n(Intercept)   1.63286    0.315163    1.01516    2.25057     5.18   <1e-06\nx            -1.48364    0.0659245  -1.61285   -1.35443   -22.51   <1e-99\nz1           -0.0823059  0.250621   -0.573515   0.408903   -0.33   0.7426\nz2           -1.17402    0.144571   -1.45737   -0.890661   -8.12   <1e-15\nlog(scale)    0.268056   0.0312804   0.206748   0.329365    8.57   <1e-99\nκ             0.872033   0.20311     0.473946   1.27012     4.29   <1e-04\n─────────────────────────────────────────────────────────────────────────\nGGamma distribution\nLog-likelihood (full): -1217.97\nLog-likelihood (Intercept only): -1327.99\nLRT p-value (X^2=220.05, df=3): 0\nSolver iterations: 41\n\n# fit 2: note stderr column\nMaximum likelihood estimates (alpha=0.05):\n────────────────────────────────────────────────────────────────────────\n                    Est    StdErr        LCI        UCI       Z  P(>|Z|)\n────────────────────────────────────────────────────────────────────────\n(Intercept)   1.63286    0.705252   0.250596   3.01513     2.32   0.0206\nx            -1.48364    0.145726  -1.76926   -1.19803   -10.18   <1e-99\nz1           -0.0823059  0.114052  -0.305845   0.141233   -0.72   0.4705\nz2           -1.17402    0.102888  -1.37567   -0.972358  -11.41   <1e-99\nlog(scale)    0.268056   0.189051  -0.102477   0.638589    1.42   0.1562\nκ             0.872033   0.334477   0.216471   1.5276      2.61   0.0091\n────────────────────────────────────────────────────────────────────────\nGGamma distribution\nLog-likelihood (full): -1217.97\nLog-likelihood (Intercept only): -1327.99\nLRT p-value (X^2=220.05, df=3): 0\nSolver iterations: 46\n\n# fit 3: simpler data (no convergence issues)\nMaximum likelihood estimates (alpha=0.05):\n──────────────────────────────────────────────────────────────────────────\n                   Est      StdErr        LCI        UCI        Z  P(>|Z|)\n──────────────────────────────────────────────────────────────────────────\n(Intercept)   1.4276    0.00738963   1.41311    1.44208    193.19   <1e-99\nx            -0.981762  0.0278233   -1.03629   -0.927229   -35.29   <1e-99\nlog(scale)   -1.35909   0.0099205   -1.37853   -1.33965   -137.00   <1e-99\nκ            -0.481034  0.0338139   -0.547308  -0.41476    -14.23   <1e-99\n──────────────────────────────────────────────────────────────────────────\nGGamma distribution\nLog-likelihood (full): -745.685\nLog-likelihood (Intercept only): -963.049\nLRT p-value (X^2=434.73, df=1): 0\nSolver iterations: 66","category":"page"},{"location":"parametric/","page":"Parametric survival analysis with AFT models","title":"Parametric survival analysis with AFT models","text":"Notes: analytic gradients and Hessian matrixes are not available for this distribution, so the solver uses finite differencing, which can make this model considerably slower to fit than alternative models.","category":"page"},{"location":"parametric/#Log-logistic","page":"Parametric survival analysis with AFT models","title":"Log-logistic","text":"","category":"section"},{"location":"parametric/","page":"Parametric survival analysis with AFT models","title":"Parametric survival analysis with AFT models","text":"In progress","category":"page"},{"location":"parametric/#Gompertz","page":"Parametric survival analysis with AFT models","title":"Gompertz","text":"","category":"section"},{"location":"parametric/","page":"Parametric survival analysis with AFT models","title":"Parametric survival analysis with AFT models","text":"In progress","category":"page"},{"location":"nonparametric/#Non-parametric-survival/risk-estimation:-Kaplan-Meier-and-Aalen-Johansen","page":"Non-parametric survival analysis","title":"Non-parametric survival/risk estimation: Kaplan-Meier and Aalen-Johansen","text":"","category":"section"},{"location":"nonparametric/#Kaplan-Meier-estimator-of-the-cumulative-risk/survival","page":"Non-parametric survival analysis","title":"Kaplan-Meier estimator of the cumulative risk/survival","text":"","category":"section"},{"location":"nonparametric/","page":"Non-parametric survival analysis","title":"Non-parametric survival analysis","text":"cd(\"docs/src/fig/\")\nusing Random, LSurvival, Distributions, LinearAlgebra, Plots, DataFrames\n\n# generate some data under a discrete hazards model\nid, int, out, data = LSurvival.dgm(MersenneTwister(1212), 100, 20)\n\ndata[:, 1] = round.(data[:, 1], digits = 3)\nd, X = data[:, 4], data[:, 1:3]\nwt = rand(MersenneTwister(1212), length(d)) # random weights just to demonstrate usage\n\ntab = DataFrame(\"id\"=>id, \"in\"=>int, \"t\"=>out, \"d\"=>d, \"wts\"=>wt)\n# Kaplan-Meier curve\nmfit = kaplan_meier(@formula(Surv(in, t, d)~1), tab, wts = tab.wts, id = ID.(id))\n#mfit = kaplan_meier(int, out, d, wts = wt, id = ID.(id)) # equivalent specification without relying on Tables.jl interface","category":"page"},{"location":"nonparametric/","page":"Non-parametric survival analysis","title":"Non-parametric survival analysis","text":"Output: (note that events do not occur in integer counts - this is due to the use of weights).","category":"page"},{"location":"nonparametric/","page":"Non-parametric survival analysis","title":"Non-parametric survival analysis","text":"Kaplan-Meier Survival\n────────────────────────────────────────\n    time   survival   # events   at risk\n────────────────────────────────────────\n1    1.0  0.886358    5.73763   50.4885\n2    2.0  0.684543   10.3561    45.4832\n3    3.0  0.622066    3.30175   36.1763\n4    4.0  0.534651    4.26077   30.3209\n5    5.0  0.469165    2.652     21.6518\n6    6.0  0.396423    3.57466   23.0554\n7    7.0  0.298113    5.09531   20.5463\n8    8.0  0.287853    0.388946  11.3009\n9    9.0  0.216842    3.24547   13.156\n10  10.0  0.195417    0.965415   9.77109\n11  11.0  0.167813    1.43976   10.1925\n12  12.0  0.140082    0.998202   6.04051\n13  13.0  0.126733    0.58481    6.13692\n14  16.0  0.10436     0.867046   4.91143\n15  20.0  0.0986266   0.270987   4.93256\n────────────────────────────────────────\nNumber of events:  43.7388\nNumber of unique event times:       15","category":"page"},{"location":"nonparametric/#Plotting-the-survival-curve","page":"Non-parametric survival analysis","title":"Plotting the survival curve","text":"","category":"section"},{"location":"nonparametric/","page":"Non-parametric survival analysis","title":"Non-parametric survival analysis","text":"plot(mfit)\nsavefig(\"km.svg\")","category":"page"},{"location":"nonparametric/","page":"Non-parametric survival analysis","title":"Non-parametric survival analysis","text":"(Image: Kaplan-Meier)","category":"page"},{"location":"nonparametric/#Checking-whether-marginal-distribution-of-the-outcome-comports-with-a-parametric-Weibull-or-Exponential-model","page":"Non-parametric survival analysis","title":"Checking whether marginal distribution of the outcome comports with a parametric Weibull or Exponential model","text":"","category":"section"},{"location":"nonparametric/","page":"Non-parametric survival analysis","title":"Non-parametric survival analysis","text":"a straight line implies Weibull\na flat line implies Exponential (a special case of Weibull)","category":"page"},{"location":"nonparametric/","page":"Non-parametric survival analysis","title":"Non-parametric survival analysis","text":"lognlogplot(mfit)\nsavefig(\"lognlog.svg\")","category":"page"},{"location":"nonparametric/","page":"Non-parametric survival analysis","title":"Non-parametric survival analysis","text":"(Image: Is-it-Weibull)","category":"page"},{"location":"nonparametric/#Competing-event-analysis:-Aalen-Johansen-estimator-of-cumulative-risk","page":"Non-parametric survival analysis","title":"Competing event analysis: Aalen-Johansen estimator of cumulative risk","text":"","category":"section"},{"location":"nonparametric/","page":"Non-parametric survival analysis","title":"Non-parametric survival analysis","text":"using Random, LSurvival, Distributions, LinearAlgebra, DataFrames\n\n# simulate some data\nz, x, t, d, event, wt = LSurvival.dgm_comprisk(MersenneTwister(122), 1000)\nX = hcat(x,z)\nenter = t .* rand(MersenneTwister(1232), length(d))*0.02 # create some fake entry times\n\ndf = DataFrame(\"enter\"=> enter, \"exit\" => t, \"e\" => event, \"wts\" => wt)\nres_aj = aalen_johansen(@formula(Surv(enter, exit, e)~1), df, wts = df.wts);\n#res_aj = aalen_johansen(enter, t, event; wts = wt);# equivalent specification without relying on Tables.jl interface\nres_aj","category":"page"},{"location":"nonparametric/","page":"Non-parametric survival analysis","title":"Non-parametric survival analysis","text":"Output: ","category":"page"},{"location":"nonparametric/","page":"Non-parametric survival analysis","title":"Non-parametric survival analysis","text":"Kaplan-Meier Survival, Aalen-Johansen risk\n──────────────────────────────────────────────────────────────────────────────────────\n      time  survival  # events (j=1)  # events (j=2)  at risk   risk (j=1)  risk (j=2)\n──────────────────────────────────────────────────────────────────────────────────────\n1   0.0022  0.999034          0.159           0.0     164.588  0.000966047  0.0\n2   0.0038  0.996697          0.5814          0.0     248.553  0.00330293   0.0\n3   0.0054  0.991383          0.0             1.8427  345.628  0.00330293   0.00531385\n4   0.0111  0.990613          0.0             0.4837  622.239  0.00330293   0.00608451\n5   0.0174  0.989756          0.781           0.0     902.762  0.00415993   0.00608451\n6   0.0254  0.987997          0.0             1.7696  996.153  0.00415993   0.00784274\n7   0.0288  0.987633          0.3667          0.0     994.383  0.00452428   0.00784274\n8   0.0298  0.987457          0.0             0.1767  994.017  0.00452428   0.00801831\n9   0.0595  0.985665          1.8042          0.0     993.84   0.00631689   0.00801831\n10  0.061   0.98494           0.7293          0.0     992.036  0.0070415    0.00801831\n──────────────────────────────────────────────────────────────────────────────────────\n...\n──────────────────────────────────────────────────────────────────────────────────────\n       time  survival  # events (j=1)  # events (j=2)  at risk  risk (j=1)  risk (j=2)\n──────────────────────────────────────────────────────────────────────────────────────\n97   0.7976  0.896879          0.0             1.9207  904.596   0.0443939   0.0587274\n98   0.798   0.895434          1.4537          0.0     902.676   0.0458382   0.0587274\n99   0.8072  0.894221          1.2212          0.0     901.222   0.0470516   0.0587274\n100  0.815   0.894108          0.1138          0.0     900.001   0.0471647   0.0587274\n101  0.8174  0.893825          0.2843          0.0     899.887   0.0474471   0.0587274\n102  0.8309  0.892683          0.0             1.1494  899.603   0.0474471   0.0598695\n103  0.8386  0.890721          0.0             1.9746  898.453   0.0474471   0.0618314\n104  0.8572  0.890309          0.4151          0.0     896.479   0.0478596   0.0618314\n105  0.9051  0.889313          1.0021          0.0     896.064   0.0488552   0.0618314\n106  0.9189  0.888984          0.3315          0.0     895.062   0.0491846   0.0618314\n──────────────────────────────────────────────────────────────────────────────────────\nNumber of events (j=1.0):  46.8371\nNumber of events (j=2.0):  58.4336\nNumber of unique event times:      106","category":"page"},{"location":"nonparametric/#Plotting-marginal-cause-specific-risks","page":"Non-parametric survival analysis","title":"Plotting marginal cause-specific risks","text":"","category":"section"},{"location":"nonparametric/","page":"Non-parametric survival analysis","title":"Non-parametric survival analysis","text":"plot(res_aj)\nsavefig(\"aj.svg\")","category":"page"},{"location":"nonparametric/","page":"Non-parametric survival analysis","title":"Non-parametric survival analysis","text":"(Image: Aalen-Johansen)","category":"page"},{"location":"coxmodel/#Cox-models","page":"Semi-parametric survival analysis with Cox models","title":"Cox models","text":"","category":"section"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"cd(\"docs/src/fig/\")\nusing Random, LSurvival, Distributions, LinearAlgebra, Plots, DataFrames\n\n# generate some data under a discrete hazards model\nid, int, out, data = LSurvival.dgm(MersenneTwister(1212), 100, 20)\n\ndata[:, 1] = round.(data[:, 1], digits = 3)\nd, X = data[:, 4], data[:, 1:3]\nwt = ones(length(d)) # weights of 1.0 just to demonstrate usage\n\n\n# Fit a Cox model with `Tables.jl` and `StatsAPI.@formula` interface (similar to GLM.jl)\n# data can be in the form of a named tuple or a DataFrame\ntab = (id=id, in = int, out = out, d=d, x=X[:,1], z1=X[:,2], z2=X[:,3], wt=wt) \ndf = DataFrame(tab) \nshow(df)","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"Output:  Note here that covariates are not time-varying, but that person-period data structures are used (which could accomdate time-varying exposures). ","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"634×7 DataFrame\n Row │ id     x        z        t      enter  d        wt      \n     │ Int64  Float64  Float64  Int64  Int64  Float64  Float64 \n─────┼─────────────────────────────────────────────────────────\n   1 │     1    0.125      0.0      1      0      0.0      1.0\n   2 │     1    0.125      0.0      2      1      0.0      1.0\n   3 │     1    0.125      0.0      3      2      0.0      1.0\n   4 │     1    0.125      0.0      4      3      0.0      1.0\n  ⋮  │   ⋮       ⋮        ⋮       ⋮      ⋮       ⋮        ⋮\n 631 │    99    0.41       0.0      1      0      1.0      1.0\n 632 │   100    0.103      0.0      1      0      0.0      1.0\n 633 │   100    0.103      0.0      2      1      0.0      1.0\n 634 │   100    0.103      0.0      3      2      1.0      1.0","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"Note use of the id argument to specify that multiple observations come from the same individual. This is important in the case of robust-variance estimation, jackknifing, bootstrapping, and influence-based residuals like dfbeta residuals. It will have no impact on the default output (confirm by fitting this model with and without the statement, and also compare influence plots below)!","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"mfit = coxph(@formula(Surv(in, out, d)~x+z1+z2), df, ties = \"efron\", wts = wt, id = ID.(df.id))","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"Output:","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"Maximum partial likelihood estimates (alpha=0.05):\n─────────────────────────────────────────────────────────\n     ln(HR)    StdErr        LCI       UCI     Z  P(>|Z|)\n─────────────────────────────────────────────────────────\nx   1.6289   0.385794   0.872755  2.38504   4.22   <1e-04\nz1  0.16381  0.30964   -0.443074  0.770694  0.53   0.5968\nz2  1.79485  0.238453   1.32749   2.26221   7.53   <1e-13\n─────────────────────────────────────────────────────────\nPartial log-likelihood (null): -353.135\nPartial log-likelihood (fitted): -322.353\nLRT p-value (X^2=61.56, df=3): 2.7234e-13\nNewton-Raphson iterations: 6","category":"page"},{"location":"coxmodel/#Plotting-survival-outcomes-(person-period-plot)","page":"Semi-parametric survival analysis with Cox models","title":"Plotting survival outcomes (person-period plot)","text":"","category":"section"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"plot(mfit.R)\nsavefig(\"ppplot.svg\")","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"(Image: Person-period plot)","category":"page"},{"location":"coxmodel/#Estimating-baseline-hazards","page":"Semi-parametric survival analysis with Cox models","title":"Estimating baseline hazards","text":"","category":"section"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"Baseline hazards (at referent levels of covariates) are estimated by default in coxph.","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"res = mfit.bh\nbasehazplot(mfit)\nsavefig(\"basehaz.svg\")","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"(Image: Baseline hazard)","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"Output: baseline hazard data with columns:","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"increment of cumulative hazard\nrisk set\nnumber of events\ntime\nweighted risk set\nweighted number of events","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"15×6 Matrix{Float64}:\n 0.0414475  100.0  14.0   1.0  100.0  14.0\n 0.0675423   86.0  19.0   2.0   86.0  19.0\n 0.0268964   67.0   6.0   3.0   67.0   6.0\n 0.046904    61.0   9.0   4.0   61.0   9.0\n 0.0613442   52.0   8.0   5.0   52.0   8.0\n 0.0405113   44.0   5.0   6.0   44.0   5.0\n ⋮                                     ⋮\n 0.0464299   19.0   2.0  10.0   19.0   2.0\n 0.0707131   17.0   2.0  11.0   17.0   2.0\n 0.0748497   15.0   3.0  12.0   15.0   3.0\n 0.0552285   12.0   1.0  13.0   12.0   1.0\n 0.0951294   11.0   2.0  16.0   11.0   2.0\n 0.0736525    9.0   1.0  20.0    9.0   1.0","category":"page"},{"location":"coxmodel/#Model-fit:-Schoenfeld-residuals-(one-set-for-each-parameter)","page":"Semi-parametric survival analysis with Cox models","title":"Model fit: Schoenfeld residuals (one set for each parameter)","text":"","category":"section"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"res = residuals(mfit, type=\"schoenfeld\")\ncoxdx(mfit, par=1)\nsavefig(\"schoenfeld.svg\")","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"(Image: Schoenfeld)","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"Output: Schoenfeld residuals","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"15×3 Matrix{Float64}:\n -0.90543      2.78278    0.853172\n -0.0520158   -0.938642  -1.24122\n -0.00391489  -0.116822   0.137734\n  0.328817     1.78523   -0.87552\n  0.098118     0.111366   0.85557\n  1.09806     -0.744318  -0.34648\n  ⋮                      \n  0.530965     0.737817   0.562743\n -0.0252867    0.0        0.0\n  0.381532    -0.226191  -0.517533\n -0.26111     -0.138081   0.0\n  0.167407     0.0       -0.596339\n -0.164212    -0.183246   0.0","category":"page"},{"location":"coxmodel/#Influence:-Jackknife/dfbeta-residuals","page":"Semi-parametric survival analysis with Cox models","title":"Influence: Jackknife/dfbeta residuals","text":"","category":"section"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"These will be on the individual level and given for each parameter (n by p matrix)","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"rdfbeta = residuals(mfit, type=\"dfbeta\") # note these are reported on observation level, but are automatically summed in the plot\nrjack = residuals(mfit, type=\"jackknife\")\n\ncoxinfluence(mfit, type=\"jackknife\", par=1)\ncoxinfluence!(mfit, type=\"dfbeta\", color=:red, par=1, title=\"Influence: β1\")\nsavefig(\"influence.svg\")\ncoxinfluence(mfit, type=\"jackknife\", par=2)\ncoxinfluence!(mfit, type=\"dfbeta\", color=:red, par=2, title=\"Influence: β2\")\nsavefig(\"influence2.svg\")","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"(Image: Influence) (Image: Influence)","category":"page"},{"location":"coxmodel/#Competing-event-analysis:-Cox-model-based-estimator-of-the-cumulative-risk/survival-function","page":"Semi-parametric survival analysis with Cox models","title":"Competing event analysis: Cox-model-based estimator of the cumulative risk/survival function","text":"","category":"section"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"using Random, LSurvival, Distributions, LinearAlgebra\n\n# simulate some data and store in a DataFrame\nusing DataFrames\nz, x, t, d, event, wt = LSurvival.dgm_comprisk(MersenneTwister(122), 1000)\nX = hcat(x,z)\nenter = t .* rand(MersenneTwister(122), length(d))*0.02 # create some fake entry times\ndf = DataFrame(\"x\"=>x[:,1],\"z\"=>z[:,1],\"t\"=>t,\"enter\"=>enter,\"event\"=>event,\"wt\"=>wt)\nshow(df)","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"Output:  event can be 0 (censored) 1 (event type 1: e.g. death from lung cancer) or 2 (event type 2: e.g. death from causes other than lung cancer)","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"1000×6 DataFrame\n  Row │ x        z        t        enter       event    wt      \n      │ Float64  Float64  Float64  Float64     Float64  Float64 \n──────┼─────────────────────────────────────────────────────────\n    1 │  2.7596   0.475    1.0     0.00190001      0.0   1.2425\n    2 │  4.166    0.3008   1.0     0.00120305      0.0   0.5362\n    3 │  1.1702   4.1267   1.0     0.0165066       0.0   0.4096\n    4 │  2.7756   4.7509   1.0     0.0190037       0.0   0.5082\n  ⋮   │    ⋮        ⋮        ⋮         ⋮          ⋮        ⋮\n  997 │  4.3977   4.611    1.0     0.0184439       0.0   0.6857\n  998 │  0.3136   1.8464   0.6908  0.00510191      2.0   1.118\n  999 │  3.7132   3.7309   1.0     0.0149235       0.0   1.2687\n 1000 │  0.9304   3.3816   1.0     0.0135263       0.0   0.4498\n                                                992 rows omitted","category":"page"},{"location":"coxmodel/#Fitting-cause-specific-Cox-models-for-competing-event-types","page":"Semi-parametric survival analysis with Cox models","title":"Fitting cause-specific Cox models for competing event types","text":"","category":"section"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"fit1 = coxph(@formula(Surv(enter, t, event==1)~x+z), df, wts=df.wt)\nn2idx = findall(event .!= 1)\nfit2 = coxph(@formula(Surv(enter, t, event==2)~x+z), df[n2idx,:], wts=df.wt[n2idx])","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"Output: fit, cause 1.","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"Maximum partial likelihood estimates (alpha=0.05):\n────────────────────────────────────────────────────────────\n      ln(HR)    StdErr        LCI        UCI      Z  P(>|Z|)\n────────────────────────────────────────────────────────────\nx  -0.656322  0.123715  -0.898799  -0.413844  -5.31   <1e-06\nz  -0.452442  0.114075  -0.676025  -0.228859  -3.97   <1e-04\n────────────────────────────────────────────────────────────\nPartial log-likelihood (null): -320.021\nPartial log-likelihood (fitted): -294.909\nLRT p-value (χ²=50.22, df=2): 1.2414e-11\nNewton-Raphson iterations: 4","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"Output: fit, cause 2.","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"Maximum partial likelihood estimates (alpha=0.05):\n────────────────────────────────────────────────────────────\n      ln(HR)    StdErr        LCI        UCI      Z  P(>|Z|)\n────────────────────────────────────────────────────────────\nx  -0.603645  0.104002  -0.807484  -0.399805  -5.80   <1e-08\nz  -0.842941  0.12444   -1.08684   -0.599043  -6.77   <1e-10\n────────────────────────────────────────────────────────────\nPartial log-likelihood (null): -396.272\nPartial log-likelihood (fitted):  -349.49\nLRT p-value (χ²=93.56, df=2): 0\nNewton-Raphson iterations: 5","category":"page"},{"location":"coxmodel/#Cox-model-estimator:-cause-specific-risks-at-given-levels-of-covariates","page":"Semi-parametric survival analysis with Cox models","title":"Cox-model estimator: cause-specific risks at given levels of covariates","text":"","category":"section"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"Risk at referent levels of x and z (can be very extreme if referent levels are unlikely/unobservable). E.g. 20% survival is very low, considering the kaplan-meier overall survival estimate at the end of follow-up is 88%. This illustrates that lower levels of x and z confer exceedingly high risks in this example, but the referent levels of x=0 and z=0 are not actually observed in the data. One could center these variables in the model fit or use the approach below of predicting risk at specific, non-referent values of x and z.","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"println(\"extrema: x\")\nextrema(x)\nprintln(\"extrema: z\")\nextrema(z)\nkaplan_meier(enter, t, d)\nres_cph_ref = risk_from_coxphmodels([fit1,fit2])","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"Output: ","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"extrema: x\n(0.0121, 4.997)\n\nextrema: z\n(0.0164, 4.9996)\n\nKaplan-Meier Survival\n───────────────────────────────────────\n      time  survival  # events  at risk\n───────────────────────────────────────\n1   0.0022  0.993103       1.0    145.0\n2   0.0038  0.98865        1.0    223.0\n3   0.0054  0.985299       1.0    295.0\n4   0.0111  0.983546       1.0    562.0\n5   0.0174  0.982419       1.0    873.0\n6   0.0254  0.981432       1.0    995.0\n7   0.0288  0.980444       1.0    994.0\n8   0.0298  0.979457       1.0    993.0\n9   0.0595  0.978469       1.0    992.0\n10  0.061   0.977482       1.0    991.0\n───────────────────────────────────────\n...\n────────────────────────────────────────\n       time  survival  # events  at risk\n────────────────────────────────────────\n97   0.7976  0.890595       1.0    903.0\n98   0.798   0.889607       1.0    902.0\n99   0.8072  0.88862        1.0    901.0\n100  0.815   0.887633       1.0    900.0\n101  0.8174  0.886645       1.0    899.0\n102  0.8309  0.885658       1.0    898.0\n103  0.8386  0.884671       1.0    897.0\n104  0.8572  0.883683       1.0    896.0\n105  0.9051  0.882696       1.0    895.0\n106  0.9189  0.881709       1.0    894.0\n────────────────────────────────────────\nNumber of events:      107\nNumber of unique event times:      106\n\nCox-model based survival, risk, baseline cause-specific hazard\n───────────────────────────────────────────────────────────────────────────────\n      time  survival  event type  cause-specific hazard  risk (j=1)  risk (j=2)\n───────────────────────────────────────────────────────────────────────────────\n1   0.0022  0.995783         1.0             0.0042255    0.0042255   0.0\n2   0.0038  0.984904         1.0             0.0109859    0.015165    0.0\n3   0.0054  0.943778         2.0             0.0426529    0.015165    0.042009\n4   0.0111  0.936002         2.0             0.00827393   0.015165    0.0498177\n5   0.0174  0.929601         1.0             0.00686208   0.021588    0.0498177\n6   0.0254  0.904361         2.0             0.0275259    0.021588    0.0754059\n7   0.0288  0.901559         1.0             0.0031037    0.0243948   0.0754059\n8   0.0298  0.899081         2.0             0.00275215   0.0243948   0.0778871\n9   0.0595  0.885436         1.0             0.0152925    0.0381441   0.0778871\n10  0.061   0.879962         1.0             0.00620196   0.0436355   0.0778871\n───────────────────────────────────────────────────────────────────────────────\n...\n────────────────────────────────────────────────────────────────────────────────\n       time  survival  event type  cause-specific hazard  risk (j=1)  risk (j=2)\n────────────────────────────────────────────────────────────────────────────────\n97   0.7976  0.254265         2.0             0.036717      0.250715    0.502688\n98   0.798   0.250166         1.0             0.0162515     0.254847    0.502688\n99   0.8072  0.246759         1.0             0.0137101     0.258277    0.502688\n100  0.815   0.246444         1.0             0.00128038    0.258593    0.502688\n101  0.8174  0.245657         1.0             0.00319903    0.259381    0.502688\n102  0.8309  0.240211         2.0             0.0224161     0.259381    0.508194\n103  0.8386  0.231124         2.0             0.0385648     0.259381    0.517458\n104  0.8572  0.230041         1.0             0.00469675    0.260467    0.517458\n105  0.9051  0.227441         1.0             0.0113674     0.263082    0.517458\n106  0.9189  0.226586         1.0             0.00376566    0.263938    0.517458\n────────────────────────────────────────────────────────────────────────────────\nNumber of events (j=1):       52\nNumber of events (j=2):       54\nNumber of unique event times:      106","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"You can also estimate risk at average levels of x and z (or any level). Here, the survival (94%) is higher than the marginal survival of 88%, emphasizing that predicted risk at population average levels of covariates (the approach taken with Cox models here) can be different from population average risk across all levels of covariates (Kaplan-Meier).","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"mnx = sum(x)/length(x)\nmnz = sum(z)/length(z)\nres_cph = risk_from_coxphmodels([fit1,fit2], coef_vectors=[coef(fit1), coef(fit2)], pred_profile=[mnx, mnz])","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"Output: ","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"Cox-model based survival, risk, baseline cause-specific hazard\n────────────────────────────────────────────────────────────────────────────────\n      time  survival  event type  cause-specific hazard   risk (j=1)  risk (j=2)\n────────────────────────────────────────────────────────────────────────────────\n1   0.0022  0.999733         1.0            0.000267233  0.000267233  0.0\n2   0.0038  0.999038         1.0            0.000694779  0.000961826  0.0\n3   0.0054  0.997883         2.0            0.00115694   0.000961826  0.00115583\n4   0.0111  0.997659         2.0            0.000224427  0.000961826  0.00137978\n5   0.0174  0.997226         1.0            0.000433978  0.00139479   0.00137978\n6   0.0254  0.996482         2.0            0.000746628  0.00139479   0.00212434\n7   0.0288  0.996287         1.0            0.000196287  0.00159039   0.00212434\n8   0.0298  0.996212         2.0            7.46507e-5   0.00159039   0.00219871\n9   0.0595  0.995249         1.0            0.000967146  0.00255387   0.00219871\n10  0.061   0.994859         1.0            0.00039223   0.00294423   0.00219871\n────────────────────────────────────────────────────────────────────────────────\n...\n────────────────────────────────────────────────────────────────────────────────\n       time  survival  event type  cause-specific hazard  risk (j=1)  risk (j=2)\n────────────────────────────────────────────────────────────────────────────────\n97   0.7976  0.949667         2.0            0.000995932   0.0248543   0.0254966\n98   0.798   0.948692         1.0            0.00102779    0.0258303   0.0254966\n99   0.8072  0.94787          1.0            0.000867068   0.0266529   0.0254966\n100  0.815   0.947793         1.0            8.09749e-5    0.0267297   0.0254966\n101  0.8174  0.947601         1.0            0.000202316   0.0269214   0.0254966\n102  0.8309  0.947025         2.0            0.000608026   0.0269214   0.0260728\n103  0.8386  0.946035         2.0            0.00104605    0.0269214   0.0270634\n104  0.8572  0.945754         1.0            0.000297036   0.0272024   0.0270634\n105  0.9051  0.945074         1.0            0.00071891    0.0278824   0.0270634\n106  0.9189  0.944849         1.0            0.000238151   0.0281074   0.0270634\n────────────────────────────────────────────────────────────────────────────────\nNumber of events (j=1):       52\nNumber of events (j=2):       54\nNumber of unique event times:      106","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"plot(res_cph)\nsavefig(\"risk-multicox.svg\")","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"(Image: Risk from competing risk Cox models)","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"Here is another way to get risk at the reference level of x and z, more explicitly:","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"res_cph_ref = risk_from_coxphmodels([fit1,fit2], coef_vectors=[coef(fit1), coef(fit2)], pred_profile=[0.0, 0.0])","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"plot(res_cph_ref)\nsavefig(\"risk-multicox2.svg\")","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"(Image: Risk from competing risk Cox models)","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"The default is the Cheng-Fine-Wei approach[cfw], which uses the cumulative hazard to estimate survival via S(t) = exp(-Lambda(t)). An alternative uses an Aalen-Johansen analogue to estimate cumulative risks. These can occasionally result in risks outside of logical bounds. Here, you can see there is a negligible difference in the risk estimates between these two approaches (contrasted with the res_cph_ref object).","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"res_cph_ref_aalen = risk_from_coxphmodels([fit1,fit2], coef_vectors=[coef(fit1), coef(fit2)], pred_profile=[0.0, 0.0], method=\"aalen-johansen\")\n# default is cheng-fine-wei method\nres_cph_ref_cheng = risk_from_coxphmodels([fit1,fit2], coef_vectors=[coef(fit1), coef(fit2)], pred_profile=[0.0, 0.0], method=\"cheng-fine-wei\")\nshow(res_cph_ref_aalen, maxrows=4)\nshow(res_cph_ref_cheng, maxrows=4)","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"Output: ","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"# Aalen-Johansen method\nCox-model based survival, risk, baseline cause-specific hazard\n──────────────────────────────────────────────────────────────────────────────\n     time  survival  event type  cause-specific hazard  risk (j=1)  risk (j=2)\n──────────────────────────────────────────────────────────────────────────────\n1  0.0022  0.995775         1.0              0.0042255   0.0042255         0.0\n2  0.0038  0.984835         1.0              0.0109859   0.0151649         0.0\n──────────────────────────────────────────────────────────────────────────────\n...\n────────────────────────────────────────────────────────────────────────────────\n       time  survival  event type  cause-specific hazard  risk (j=1)  risk (j=2)\n────────────────────────────────────────────────────────────────────────────────\n105  0.9051  0.223782         1.0             0.0113674     0.26186     0.514358\n106  0.9189  0.222939         1.0             0.00376566    0.262703    0.514358\n────────────────────────────────────────────────────────────────────────────────\nNumber of events (j=1):       52\nNumber of events (j=2):       54\nNumber of unique event times:      106\n\n# Cheng, Fine, Wei method\nCox-model based survival, risk, baseline cause-specific hazard\n──────────────────────────────────────────────────────────────────────────────\n     time  survival  event type  cause-specific hazard  risk (j=1)  risk (j=2)\n──────────────────────────────────────────────────────────────────────────────\n1  0.0022  0.995783         1.0              0.0042255   0.0042255         0.0\n2  0.0038  0.984904         1.0              0.0109859   0.015165          0.0\n──────────────────────────────────────────────────────────────────────────────\n...\n────────────────────────────────────────────────────────────────────────────────\n       time  survival  event type  cause-specific hazard  risk (j=1)  risk (j=2)\n────────────────────────────────────────────────────────────────────────────────\n105  0.9051  0.227441         1.0             0.0113674     0.263082    0.517458\n106  0.9189  0.226586         1.0             0.00376566    0.263938    0.517458\n────────────────────────────────────────────────────────────────────────────────\nNumber of events (j=1):       52\nNumber of events (j=2):       54\nNumber of unique event times:      106","category":"page"},{"location":"coxmodel/#Cox-model-estimator:-standard-errors-and-confidence-intervals","page":"Semi-parametric survival analysis with Cox models","title":"Cox-model estimator: standard errors and confidence intervals","text":"","category":"section"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"Robust, jackknife (leave-on-out), and bootstrap standard errors are easily calculated from cox model fits (though they may be computationally demanding to calculate). For person-period data, each of these requires the id argument to be specified.","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"coxfit = coxph(@formula(Surv(in, out, d)~x+z1+z2), tab, id=ID.(tab.id))\nshow(coxfit)\n\nasym = stderror(coxfit)   # asymptotic approach based on information matrix\nrob = stderror(coxfit, type=\"robust\")  # jackknife approach\njack = stderror(coxfit, type=\"jackknife\")  # jackknife approach\nboot = stderror(coxfit, type=\"bootstrap\", iter=200, seed=MersenneTwister(12322)) # bootstrapping approach\nDataFrame(\"asym\" => asym, \"rob\" => rob,\"jack\" => jack, \"boot\" => boot)","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"Output: ","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"We can see in this dataset all standard error estimates are fairly similar","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"3×4 DataFrame\n Row │ asym      rob       jack      boot     \n     │ Float64   Float64   Float64   Float64  \n─────┼────────────────────────────────────────\n   1 │ 0.385794  0.34421   0.37397   0.365392\n   2 │ 0.30964   0.307867  0.326048  0.331512\n   3 │ 0.238453  0.238146  0.260687  0.240776","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"These methods are also available for vcov and confint, where confint uses variance estimates to create Wald-type confidence intervals (i.e. not bootstrap percentile confidence intervals)","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"asym = confint(coxfit)   # asymptotic approach based on information matrix\nrob = confint(coxfit, type=\"robust\")  # jackknife approach\njack = confint(coxfit, type=\"jackknife\")  # jackknife approach\nboot = confint(coxfit, type=\"bootstrap\", iter=200, seed=MersenneTwister(12322)) # bootstrapping approach\nDataFrame(\"asym\" => asym[:,1], \"rob\" => rob[:,1],\"jack\" => jack[:,1], \"boot\" => boot[:,1])","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"Output: ","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"Here are the lower 95% confidence bounds for each method:","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"3×4 DataFrame\n Row │ asym       rob        jack       boot      \n     │ Float64    Float64    Float64    Float64   \n─────┼────────────────────────────────────────────\n   1 │  0.872755   0.954257   0.895928   0.912742\n   2 │ -0.443074  -0.439597  -0.475232  -0.485941\n   3 │  1.32749    1.32809    1.28391    1.32294","category":"page"},{"location":"coxmodel/","page":"Semi-parametric survival analysis with Cox models","title":"Semi-parametric survival analysis with Cox models","text":"[cfw]: Cheng SC, Fine JP, Wei LJ. Prediction of Cumulative Incidence Function under the Proportional Hazards Model. Biometrics. 1998;54:219–228.","category":"page"},{"location":"","page":"Help","title":"Help","text":"CurrentModule = LSurvival=","category":"page"},{"location":"#[LSurvival](https://github.com/alexpkeil1/LSurvival.jl)","page":"Help","title":"LSurvival","text":"","category":"section"},{"location":"","page":"Help","title":"Help","text":"Survival analysis functions in Julia for time-to-event outcomes that can include:","category":"page"},{"location":"","page":"Help","title":"Help","text":"Loss-to-follow-up/right censoring\nLate entry/left truncation (not available in Survival.jl)\n\"Person-period\" data structures (not available in Survival.jl)\nObservation weights (not available in Survival.jl)\nCompeting risks (not available in Survival.jl)","category":"page"},{"location":"","page":"Help","title":"Help","text":"Capabilities include estimators for","category":"page"},{"location":"","page":"Help","title":"Help","text":"Kaplan-Meier non-parametric conditional risk functions\nAalen-Johansen non-parametric cause-specific unconditional risk functions\nCox proportional hazards model (Efron's or Breslow's methods for ties)\nParametric survival models","category":"page"},{"location":"","page":"Help","title":"Help","text":"Convenience functions enable:","category":"page"},{"location":"","page":"Help","title":"Help","text":"Non-parametric bootstrapping, cluster-bootstrapping, jackknife\nEstimating baseline hazards from a Cox Model\nEstimating cause-specific risk from an exhaustive set of Cox models for competing risk outcomes\nSimple simulation of competing and non-competing survival events\nMartingale, score, Schoenfeld, and dfbeta residuals\nCluster robust variance estimation (Cox models)","category":"page"},{"location":"","page":"Help","title":"Help","text":"Plans to include:","category":"page"},{"location":"","page":"Help","title":"Help","text":"Parametric survival models: more distributions\nStratification in Cox models\nParametric survival model diagnostics","category":"page"},{"location":"","page":"Help","title":"Help","text":"The package has been tuned to follow the \"survival\" package from R in terms of specific estimators/results.","category":"page"},{"location":"","page":"Help","title":"Help","text":"Report issues here","category":"page"},{"location":"#Installation","page":"Help","title":"Installation","text":"","category":"section"},{"location":"","page":"Help","title":"Help","text":"using Pkg; Pkg.add(url = \"https://github.com/alexpkeil1/LSurvival.jl\")","category":"page"},{"location":"#Quick-examples","page":"Help","title":"Quick examples","text":"","category":"section"},{"location":"#Single-event-type:-Cox-model-and-Kaplan-Meier-curve","page":"Help","title":"Single event type: Cox model and Kaplan-Meier curve","text":"","category":"section"},{"location":"","page":"Help","title":"Help","text":"# generate some data under a discrete hazards model\nusing Random\nid, int, out, data = LSurvival.dgm(MersenneTwister(1212), 100, 20)\n\ndata[:, 1] = round.(data[:, 1], digits = 3)\nd, X = data[:, 4], data[:, 1:3]\n\ntab = ( in = int, out = out, d=d, x=X[:,1], z1=X[:,2], z2=X[:,3]) \nwt = ones(length(d)) # weights of 1.0 just to demonstrate usage\n\n\ncoxph(@formula(Surv(in, out, d)~x+z1+z2), tab, ties = \"efron\", wts = wt)","category":"page"},{"location":"","page":"Help","title":"Help","text":"Output:","category":"page"},{"location":"","page":"Help","title":"Help","text":"Maximum partial likelihood estimates (alpha=0.05):\n───────────────────────────────────────────────────────────\n      ln(HR)    StdErr         LCI       UCI     Z  P(>|Z|)\n───────────────────────────────────────────────────────────\nx   1.12624   0.392651   0.356659   1.89582   2.87   0.0041\nz1  0.434587  0.27122   -0.0969944  0.966168  1.60   0.1091\nz2  1.70434   0.222878   1.26751    2.14117   7.65   <1e-13\n───────────────────────────────────────────────────────────\nPartial log-likelihood (null): -361.948\nPartial log-likelihood (fitted): -332.063\nLRT p-value (χ²=59.77, df=3): 6.5858e-13\nNewton-Raphson iterations: 5","category":"page"},{"location":"","page":"Help","title":"Help","text":"# can also be done if there is no late entry\ncoxph(@formula(Surv(out, d)~x+z1+z2), tab, ties = \"efron\", wts = wt)\n# can also be done if there is no late entry and no right censoring (i.e. all times are failure times)\ncoxph(@formula(Surv(out)~x+z1+z2), tab, ties = \"efron\", wts = wt)\n\n# Kaplan-Meier estimator of the cumulative risk/survival\nkaplan_meier(int, outt, d)","category":"page"},{"location":"#Competing-event-analysis:-Aalen-Johansen-and-Cox-model-based-estimators-of-the-cumulative-risk/survival","page":"Help","title":"Competing event analysis: Aalen-Johansen and Cox-model-based estimators of the cumulative risk/survival","text":"","category":"section"},{"location":"","page":"Help","title":"Help","text":"# Aalen-Johansen estimator: marginal cause-specific risks\nres_aj = aalen_johansen(enter, t, event; wts = wt);\nres_aj\n\n# Cox-model estimator: cause-specific risks at given levels of covariates\nfit1 = fit(PHModel, X, enter, t, (event .== 1), ties = \"efron\",  wts = wt)\nn2idx = findall(event .!= 1)\nfit2 = fit(PHModel, X[n2idx,:], enter[n2idx], t[n2idx], (event[n2idx] .== 2), ties = \"efron\",  wts = wt[n2idx])\n\n# risk at average levels of `x` and `z`\nres_cph = risk_from_coxphmodels([fit1,fit2], coef_vectors=[coef(fit1), coef(fit2)], pred_profile=mean(X, dims=1))\n# compare to Aalen-Johansen fit\nres_aj\n\n\n# this approach operates on left censored outcomes (which operate in the background in model fitting)\nLSurvivalResp(enter, t, d, origintime=0)\nLSurvivalCompResp(enter, t, event) # automatically infers origin\n\n\n# can use the ID type to refer to units with multiple observations\nid, int, outt, data = dgm(MersenneTwister(), 1000, 10; regimefun = int_0)\nLSurvivalResp(int, outt, data[:,4], ID.(id))","category":"page"},{"location":"#Index-of-functions","page":"Help","title":"Index of functions","text":"","category":"section"},{"location":"","page":"Help","title":"Help","text":"","category":"page"},{"location":"#Function-help","page":"Help","title":"Function help","text":"","category":"section"},{"location":"","page":"Help","title":"Help","text":"Modules = [LSurvival]","category":"page"},{"location":"#LSurvival.AbstractLSurvivalParms","page":"Help","title":"LSurvival.AbstractLSurvivalParms","text":"AbstractLsurvParms\n\nAbstract type representing a model predictors and coefficient parameters\n\n\n\n\n\n","category":"type"},{"location":"#LSurvival.AbstractLSurvivalResp","page":"Help","title":"LSurvival.AbstractLSurvivalResp","text":"AbstractLsurvResp\n\nAbstract type representing a model response vector\n\n\n\n\n\n","category":"type"},{"location":"#LSurvival.AbstractNPSurv","page":"Help","title":"LSurvival.AbstractNPSurv","text":"Abstract type for non-parametric survival models, including Kaplan-Meier, Aalen Johansen, and Cox-model based estimates of survival using an Aalen-Johansen-like estimator\n\n\n\n\n\n","category":"type"},{"location":"#LSurvival.AbstractPH","page":"Help","title":"LSurvival.AbstractPH","text":"Abstract type for proportional hazards models\n\n\n\n\n\n","category":"type"},{"location":"#LSurvival.AbstractPSModel","page":"Help","title":"LSurvival.AbstractPSModel","text":"AbstractPS\n\nAbstract type for parametric survival models\n\n\n\n\n\n","category":"type"},{"location":"#LSurvival.AbstractSurvDist","page":"Help","title":"LSurvival.AbstractSurvDist","text":"AbstractSurvDist\n\nAbstract type for parametric survival distributions\n\n\n\n\n\n","category":"type"},{"location":"#LSurvival.ID","page":"Help","title":"LSurvival.ID","text":"Type for identifying individuals in survival outcomes.\n\nUsed for the id argument in \n\nOutcome types: LSurvivalResp, LSurvivalCompResp \nModel types: PHModel, KMRisk, AJRisk\n\nAccepts any Number or String. There is no significance to having this particular struct, but it enables easier use of multiple dispatch.\n\n[ID(i) for i in 1:10]\n\n\n\n\n\n","category":"type"},{"location":"#LSurvival.LSurvivalCompResp","page":"Help","title":"LSurvival.LSurvivalCompResp","text":"Outcome type for competing risk survival outcomes subject to left truncation and right censoring (not generally needed for users)\n\nParameters\n\nenter Time at observation start\nexit Time at observation end\ny event occurrence in observation\nwts observation weights\neventtimes unique event times\norigin origin on the time scale\nid person level identifier (must be wrapped in ID() function)\neventtypes vector of unique event types\neventmatrix matrix of indicators on the observation level\nSignatures:\n\n struct LSurvivalCompResp{\n E<:AbstractVector,\n X<:AbstractVector,\n Y<:AbstractVector,\n W<:AbstractVector,\n T<:Real,\n I<:AbstractLSurvivalID,\n V<:AbstractVector,\n M<:AbstractMatrix,\n } <: AbstractLSurvivalResp\n enter::E\n exit::X\n y::Y\n wts::W\n eventtimes::X\n origin::T\n id::Vector{I}\n eventtypes::V\n eventmatrix::M\n end\n\n LSurvivalCompResp(\n enter::E,\n exit::X,\n y::Y,\n wts::W,\n id::Vector{I}\n )\n\n LSurvivalCompResp(\n enter::E,\n exit::X,\n y::Y,\n id::Vector{I}\n )\n\n LSurvivalCompResp(\n enter::E,\n exit::X,\n y::Y,\n wts::W,\n )\n\n LSurvivalCompResp(\n enter::E,\n exit::X,\n y::Y,\n )\n\n LSurvivalCompResp(\n  exit::X,\n  y::Y,\n  ) where {X<:Vector,Y<:Union{Vector{<:Real},BitVector}}\n\n\n\n\n\n","category":"type"},{"location":"#LSurvival.LSurvivalResp","page":"Help","title":"LSurvival.LSurvivalResp","text":"Outcome type for survival outcome subject to left truncation and right censoring. \n\nWill not generally be needed by users\n\nParameters\n\nenter: Time at observation start\nexit: Time at observation end\ny: event occurrence in observation\nwts: observation weights\neventtimes: unique event times\norigin: origin on the time scale\nid: person level identifier (must be wrapped in ID() function)\n\n struct LSurvivalResp{\n E<:AbstractVector,\n X<:AbstractVector,\n Y<:AbstractVector,\n W<:AbstractVector,\n T<:Real,\n I<:AbstractLSurvivalID,\n } <: AbstractLSurvivalResp\n enter::E\n exit::X\n y::Y\n wts::W\n eventtimes::E\n origin::T\n id::Vector{I}\n end\n\n\n LSurvivalResp(\n    enter::E,\n    exit::X,\n    y::Y,\n    wts::W,\n    id::Vector{I},\n  ) where {\n    E<:Vector,\n    X<:Vector,\n    Y<:Union{Vector{<:Real},BitVector},\n    W<:Vector,\n    I<:AbstractLSurvivalID,\n}\n\n LSurvivalResp(\n enter::E,\n exit::X,\n y::Y,\n id::Vector{I},\n ) \n\n\n LSurvivalResp(\n  y::Vector{Y},\n  wts::W,\n  id::Vector{I},\n  ) where {Y<:AbstractSurvTime,W<:Vector,I<:AbstractLSurvivalID}\n\n LSurvivalResp(\n  enter::E,\n  exit::X,\n  y::Y,\n  ) where {E<:Vector,X<:Vector,Y<:Union{Vector{<:Real},BitVector}}\n\n LSurvivalResp(exit::X, y::Y) where {X<:Vector,Y<:Vector}\n\nExamples\n\n  # no late entry\n  LSurvivalResp([.5, .6], [1,0])\n\n\n\n\n\n\n","category":"type"},{"location":"#LSurvival.PHModel","page":"Help","title":"LSurvival.PHModel","text":"PHModel: Mutable object type for proportional hazards regression (not generally needed for users)\n\nParameters\n\nR Survival response\nP        # parameters\nties String: \"efron\" or \"breslow\"\nfit Bool: logical for whether the model has been fitted\nbh AbstractMatrix: baseline hazard estimates\nSignatures\n\n mutable struct PHModel{G<:LSurvivalResp,L<:AbstractLSurvivalParms} <: AbstractPH\n R::G        # Survival response\n P::L        # parameters\n ties::String #\"efron\" or\"breslow\"\n fit::Bool\n bh::AbstractMatrix\n end\n\n PHModel(\n R::G,\n P::L,\n ties::String,\n fit::Bool,\n ) where {G<:LSurvivalResp,L<:AbstractLSurvivalParms}\n PHModel(R::G, P::L, ties::String) where {G<:LSurvivalResp,L<:AbstractLSurvivalParms}\n PHModel(R::G, P::L) where {G<:LSurvivalResp,L<:AbstractLSurvivalParms}\n\nMethods: fit, coef, confint, std_err, show\n\nExample\n\n using LSurvival\n using Random\n import LSurvival: _stepcox!, dgm_comprisk\n\n z,x,t,d, event,wt = dgm_comprisk(MersenneTwister(1212), 100);\n enter = zeros(length(t));\n X = hcat(x,z);\n R = LSurvivalResp(enter, t, Int.(d), wt)\n P = PHParms(X)\n mf = PHModel(R,P)\n  LSurvival._fit!(mf)\n\n\n\n\n\n","category":"type"},{"location":"#LSurvival.PHSurv","page":"Help","title":"LSurvival.PHSurv","text":"Mutable type for proportional hazards models (not generally needed by users)\n\nPHSsurv: Object type for proportional hazards regression\n\nsurv::Vector{Float64} risk::Matrix{Float64} basehaz::Vector{Float64} event::Vector{Float64}\n\nfitlist: vector of PHSurv objects (Cox model fits)\neventtypes: vector of unique event types\ntimes: unique event times\nsurv: Overall survival at each time\nrisk: Cause-specific risk  at each time (1 for each outcome type)\nbasehaz: baseline hazard for a specific event type\nevent: value of event type that occurred at each time\n\nMethods: fit, show\n\nmutable struct PHSurv{G<:Array{T} where {T<:PHModel}} <: AbstractNPSurv\nfitlist::G        \neventtypes::AbstractVector\ntimes::AbstractVector\nsurv::Vector{Float64}\nrisk::Matrix{Float64}\nbasehaz::Vector{Float64}\nevent::Vector{Float64}\nend\n\nPHSurv(fitlist::Array{T}, eventtypes) where {T<:PHModel}\nPHSurv(fitlist::Array{T}) where {T<:PHModel}\n\n\n\n\n\n","category":"type"},{"location":"#LSurvival.Strata","page":"Help","title":"LSurvival.Strata","text":"Type for identifying individuals in survival outcomes. Used for the strata argument in PHModel (not yet implemented)\n\nAccepts any Number or String. There is no significance to having this particular struct, but it enables easier use of multiple dispatch.\n\n[Strata(i) for i in 1:10]\n\n\n\n\n\n","category":"type"},{"location":"#LSurvival._update_PHParms!-Union{Tuple{T}, Tuple{I}, Tuple{M}, Tuple{M, I, Array{Vector{T}, 1}, Array{Vector{T}, 1}}} where {M<:AbstractPH, I<:Int64, T<:Int64}","page":"Help","title":"LSurvival._update_PHParms!","text":"Update the partial likelihood, gradient and Hessian values from a Cox model fit (used during fitting, not generally useful for users).\n\nUses Breslow's or Efron's partial likelihood.\n\nUpdates over all observations\n\nSignature\n\n_update_PHParms!(\n m::M,\n # big indexes\n ne::I,\n caseidxs::Vector{Vector{T}},\n risksetidxs::Vector{Vector{T}},\n ) where {M<:AbstractPH,I<:Int,T<:Int}\n\nupdatePHParms!(m, risksetidxs, caseidxs, ne, den)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.aalen_johansen-Tuple{FormulaTerm, Any}","page":"Help","title":"LSurvival.aalen_johansen","text":"Aalen-Johansen estimator for cumulative cause-specific risk (in the presence of competing events)\n\nSignatures\n\n StatsBase.fit!(m::T; kwargs...) where {T<:AbstractNPSurv}\n\n aalen_johansen(enter::AbstractVector, exit::AbstractVector, y::AbstractVector,\n   ; kwargs...)\n\n\nKeyword arguments\n\nwts::Vector{<:Real} = similar(enter, 0); vector of case weights (or zero length vector) for each observation\nid::Vector{<:AbstractLSurvivalID} = [ID(i) for i in eachindex(y)]; Vector of AbstractSurvID objects denoting observations that form a single unit (used in bootstrap and jackknife methods)\natol = 0.00000001; absolute tolerance for defining tied event times\nkeepy = true; keep the outcome vector after fitting (may save memory with large datasets)\neps = 0.00000001; deprecated (replaced by atol)\n\nusing LSurvival\nusing Random\nz,x,t,d, event,wt = LSurvival.dgm_comprisk(MersenneTwister(1212), 1000);\nenter = zeros(length(t));\n   # event variable is coded 0[referent],1,2\nm = fit(AJSurv, enter, t, event)\nmw = fit(AJSurv, enter, t, event, wts=wt)\n\nor, equivalently:\n\naalen_johansen(enter, t, event, wts=wt)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.bootstrap-Tuple{MersenneTwister, PHModel, Int64}","page":"Help","title":"LSurvival.bootstrap","text":"Bootstrapping coefficients of a proportional hazards model\n\nSignatures\n\n# single bootstrap draw, keeping the entire object\nbootstrap(rng::MersenneTwister, m::PHModel)\nbootstrap(m::PHModel)\n# muliple bootstrap draws, keeping only coefficient estimates\nbootstrap(rng::MersenneTwister, m::PHModel, iter::Int; kwargs...)\nbootstrap(m::PHModel, iter::Int; kwargs...)\n\nReturns:\n\nIf using bootstrap(m): a single bootstrap draw\nIf using bootstrap(m, 10) (e.g.): 10 bootstrap draws of the cumulative cause-specific risks at the end of follow up\n\nusing LSurvival, Random\n\nid, int, outt, data =\nLSurvival.dgm(MersenneTwister(1212), 500, 5; afun = LSurvival.int_0)\n\nd, X = data[:, 4], data[:, 1:3]\nweights = rand(length(d))\n\n# survival outcome:\nR = LSurvivalResp(int, outt, d, ID.(id))    # specification with ID only\nP = PHParms(X)\n\nMod = PHModel(R, P)\nLSurvival._fit!(Mod, start=Mod.P._B, keepx=true, keepy=true)\n\n\n# careful propogation of bootstrap sampling\nidx, R2 = bootstrap(R)\nP2 = bootstrap(idx, P)\nModb = PHModel(R2, P2)\nLSurvival._fit!(Mod, start=Mod.P._B, keepx=true, keepy=true)\n\n# convenience function for bootstrapping a model\nModc = bootstrap(Mod)\nLSurvival._fit!(Modc, start=Modc.P._B);\nModc\nModc.P.X == nothing\nModc.R == nothing\n\n\nBootstrap Cox model coefficients\n\nLSurvival._fit!(mb, keepx=true, keepy=true, start=[0.0, 0.0])\n\nusing LSurvival, Random\nres = z, x, outt, d, event, wts = LSurvival.dgm_comprisk(MersenneTwister(123123), 200)\nint = zeros(length(d)) # no late entry\nX = hcat(z, x)\n\nmainfit = fit(PHModel, X, int, outt, d .* (event .== 1), keepx=true, keepy=true)\n\nfunction stddev_finite(x)\n n = length(x)\n mnx = sum(x)/n\n ret = sum((x .- mnx) .^ 2)\n ret /= n-1\n sqrt(ret)\nend\n\n# bootstrap standard error versus asymptotic\nmb = bootstrap(MersenneTwister(123123), mainfit, 200)\n## bootstrap standard error\n[stddev_finite(mb[:,i]) for i in 1:2]\n## asymptotic standard error\nstderror(mainfit)\n\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.bootstrap-Union{Tuple{M}, Tuple{MersenneTwister, M}} where M<:AJSurv","page":"Help","title":"LSurvival.bootstrap","text":"Bootstrap methods for Aalen-Johansen cumulative risk estimator\n\nSignatures\n\n # single bootstrap draw, keeping the entire object\n bootstrap(rng::MersenneTwister, m::AJSurv)\n bootstrap(m::AJSurv)\n\n # muliple bootstrap draws, keeping only coefficient estimates\n bootstrap(rng::MersenneTwister, m::AJSurv, iter::Int; kwargs...)\n bootstrap(m::AJSurv, iter::Int; kwargs...)\n\nReturns:\n\nIf using bootstrap(m): a single bootstrap draw\nIf using bootstrap(m, 10) (e.g.): 10 bootstrap draws of the cumulative cause-specific risks at the end of follow up\n\nusing LSurvival\nusing Random\n\nz, x, t, d, event, wt = LSurvival.dgm_comprisk(MersenneTwister(1212), 100)\nid = 1:length(x)\nenter = zeros(length(t))\n\naj1 = aalen_johansen(enter, t, event, id=ID.(id), wts=wt)\naj2 = bootstrap(aj1, keepy=false);\najboot = bootstrap(aj1, 10, keepy=false);\naj1\n\n\naj1.R\naj2.R\n\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.bootstrap-Union{Tuple{M}, Tuple{MersenneTwister, M}} where M<:KMSurv","page":"Help","title":"LSurvival.bootstrap","text":"Bootstrap methods for Kaplan-Meier survival curve estimator\n\nSignatures\n\n # single bootstrap draw, keeping the entire object\n bootstrap(rng::MersenneTwister, m::KMSurv)\n bootstrap(m::KMSurv)\n\n # muliple bootstrap draws, keeping only coefficient estimates\n bootstrap(rng::MersenneTwister, m::KMSurv, iter::Int; kwargs...)\n bootstrap(m::KMSurv, iter::Int; kwargs...)\n\nReturns:\n\nIf using bootstrap(m): a single bootstrap draw\nIf using bootstrap(m, 10) (e.g.): 10 bootstrap draws of the survival probability at the end of follow up\n\nusing LSurvival\nusing Random\n\nid, int, outt, data =\nLSurvival.dgm(MersenneTwister(1212), 20, 5; afun = LSurvival.int_0)\n\nd, X = data[:, 4], data[:, 1:3]\nwts = rand(length(d))\n\nkm1 = kaplan_meier(int, outt, d, id=ID.(id), wts=wts)\nkm2 = bootstrap(km1, keepy=false)\nkm3 = bootstrap(km1, 10, keepy=false)\nkm1\n\nkm1.R\nkm2.R\n\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.bootstrap-Union{Tuple{M}, Tuple{MersenneTwister, M}} where M<:PHModel","page":"Help","title":"LSurvival.bootstrap","text":"Bootstrapping coefficients of a proportional hazards model\n\nSignatures\n\n# single bootstrap draw, keeping the entire object\nbootstrap(rng::MersenneTwister, m::PHModel)\nbootstrap(m::PHModel)\n# muliple bootstrap draws, keeping only coefficient estimates\nbootstrap(rng::MersenneTwister, m::PHModel, iter::Int; kwargs...)\nbootstrap(m::PHModel, iter::Int; kwargs...)\n\nReturns:\n\nIf using bootstrap(m): a single bootstrap draw\nIf using bootstrap(m, 10) (e.g.): 10 bootstrap draws of the cumulative cause-specific risks at the end of follow up\n\nusing LSurvival, Random\n\nid, int, outt, data =\nLSurvival.dgm(MersenneTwister(1212), 500, 5; afun = LSurvival.int_0)\n\nd, X = data[:, 4], data[:, 1:3]\nweights = rand(length(d))\n\n# survival outcome:\nR = LSurvivalResp(int, outt, d, ID.(id))    # specification with ID only\nP = PHParms(X)\n\nMod = PHModel(R, P)\nLSurvival._fit!(Mod, start=Mod.P._B, keepx=true, keepy=true)\n\n\n# careful propogation of bootstrap sampling\nidx, R2 = bootstrap(R)\nP2 = bootstrap(idx, P)\nModb = PHModel(R2, P2)\nLSurvival._fit!(Mod, start=Mod.P._B, keepx=true, keepy=true)\n\n# convenience function for bootstrapping a model\nModc = bootstrap(Mod)\nLSurvival._fit!(Modc, start=Modc.P._B);\nModc\nModc.P.X == nothing\nModc.R == nothing\n\n\nBootstrap Cox model coefficients\n\nLSurvival._fit!(mb, keepx=true, keepy=true, start=[0.0, 0.0])\n\nusing LSurvival, Random\nres = z, x, outt, d, event, wts = LSurvival.dgm_comprisk(MersenneTwister(123123), 200)\nint = zeros(length(d)) # no late entry\nX = hcat(z, x)\n\nmainfit = fit(PHModel, X, int, outt, d .* (event .== 1), keepx=true, keepy=true)\n\nfunction stddev_finite(x)\n n = length(x)\n mnx = sum(x)/n\n ret = sum((x .- mnx) .^ 2)\n ret /= n-1\n sqrt(ret)\nend\n\n# bootstrap standard error versus asymptotic\nmb = bootstrap(MersenneTwister(123123), mainfit, 200)\n## bootstrap standard error\n[stddev_finite(mb[:,i]) for i in 1:2]\n## asymptotic standard error\nstderror(mainfit)\n\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.bootstrap-Union{Tuple{S}, Tuple{Vector{Int64}, S}} where S<:PSParms","page":"Help","title":"LSurvival.bootstrap","text":"Bootstrap sampling of a proportional hazards predictor object\n\nusing LSurvival, Random\n\nid, int, outt, data =\nLSurvival.dgm(MersenneTwister(1212), 20, 5; afun = LSurvival.int_0)\n\nd, X = data[:, 4], data[:, 1:3]\nweights = rand(length(d))\n\n# survival outcome:\nR = LSurvivalResp(int, outt, d, ID.(id))    # specification with ID only\nP = PHParms(X)\nidx, R2 = bootstrap(R)\nP2 = bootstrap(idx, P)\n\nMod = PHModel(R2, P2)\nLSurvival._fit!(Mod, start=Mod.P._B)\n\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.bootstrap-Union{Tuple{T}, Tuple{MersenneTwister, T}} where T<:LSurvivalCompResp","page":"Help","title":"LSurvival.bootstrap","text":"Bootstrapping sampling of a competing risk survival response\n\nSignatures\n\nbootstrap(rng::MersenneTwister, R::T) where {T<:LSurvivalCompResp}\nbootstrap(R::T) where {T<:LSurvivalCompResp}\n\nz,x,t,d,event,weights =\nLSurvival.dgm_comprisk(MersenneTwister(1212), 300)\nenter = zeros(length(event))\n\n# survival outcome:\nR = LSurvivalCompResp(enter, t, event, weights, ID.(collect(1:length(t))))    # specification with ID only\nbootstrap(R) # note that entire observations/clusters identified by id are kept\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.bootstrap-Union{Tuple{T}, Tuple{MersenneTwister, T}} where T<:LSurvivalResp","page":"Help","title":"LSurvival.bootstrap","text":"Bootstrapping sampling of a survival response\n\nid, int, outt, data =\nLSurvival.dgm(MersenneTwister(1212), 20, 5; afun = LSurvival.int_0)\n\nd, X = data[:, 4], data[:, 1:3]\nweights = rand(length(d))\n\n# survival outcome:\nR = LSurvivalResp(int, outt, d, ID.(id))    # specification with ID only\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.calcp-Tuple{Any}","page":"Help","title":"LSurvival.calcp","text":"Two-tailed p-value for a (null) standard normal distribution     depends on SpecialFunctions     https://en.wikipedia.org/wiki/Normal_distribution\n\n    calcp(z) = 1.0 - SpecialFunctions.erf(abs(z) / sqrt(2))\n\n    calcp(1.96)\n\n\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.cdfchisq-Tuple{Any, Any}","page":"Help","title":"LSurvival.cdfchisq","text":"quantile function for a chi-squared distribution     depends on SpecialFunctions     https://en.wikipedia.org/wiki/Chi-squared_distribution\n\nSource code, example:\n\n    cdfchisq(df, x) = SpecialFunctions.gamma_inc(df / 2, x / 2, 0)[1]\n\n    cdfchisq(3, 3.45)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.cdfnorm-Tuple{Any}","page":"Help","title":"LSurvival.cdfnorm","text":"quantile function for a standard normal distribution     depends on SpecialFunctions     https://en.wikipedia.org/wiki/Normal_distribution\n\nSource code, example:\n\n    cdfnorm(z) = 0.5 * (1 + SpecialFunctions.erf(z / sqrt(2)))\n    \n    cdfnorm(1.96)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.coxph-Tuple{Any, Any, Any, Any, Vararg{Any}}","page":"Help","title":"LSurvival.coxph","text":"Fit method for AbstractPH objects (Cox models)\n\nKeyword arguments (used here, and passed on to internal structs)\n\nties \"breslow\" or \"efron\" (default)\nwts observation weights\nties \"breslow\" or \"efron\" (default)\noffset not currently used at all\nfitargs arguments passed to other structs, which include\nid cluster or individual level ID (defaults to a unique value for each row of data) see note below on ID\ncontrasts StatsModel style contrasts (dicts) that can be used for variable transformations/indicator variable creation (e.g. https://juliastats.org/StatsModels.jl/stable/contrasts/)\nArguments passed onto fitting routine:\neps (default: Float64 = 1e-9) tolerance for declaring convergence. Model is determined to be converged when relative change in log-partial likelihood is < eps .\ngetbasehaz (default: true): estimate baseline hazard\nstart (default: nothing) nothing, or vector of floats corresponding to initial values for parameters. Note that this defaults to a vector of zeros when set to nothing, and setting to other values invalidates some of the test statistics reported by default with coxph.\nkeepx (default: true) logical. Keep design matrix in AbstractPH object output (set to false for slight computational gain).\nkeepy (default: true)logical.  Keep outcome in AbstractPH object output (set to false for slight computational gain).\nbootstrap_sample (default: false) Fit the model to a bootstrap sample of the data (not generally used by end-users, but provides some convenience toward bootstrap variance estimation).\nbootstrap_rng (default: Random.MersenneTwister()) Random number seed used when drawing a bootstrap sample of the data (not generally used by end-users, but provides some convenience toward bootstrap variance estimation).\nSignatures\n\n  fit(::Type{M},\n  X::AbstractMatrix,#{<:FP},\n  enter::AbstractVector{<:Real},\n  exit::AbstractVector{<:Real},\n  y::Union{AbstractVector{<:Real},BitVector}\n  ;\n  ties =\"breslow\",\n  wts::AbstractVector{<:Real}      = similar(y, 0),\n  offset::AbstractVector{<:Real}   = similar(y, 0),\n  fitargs...) where {M<:AbstractPH}\n\n coxph(f::FormulaTerm, data; kwargs...)\n\n  coxph(X, enter, exit, y, args...; kwargs...)\n\n   using LSurvival, Random\n   z,x,t,d, event,wt = LSurvival.dgm_comprisk(MersenneTwister(1212), 1000);\n   enter = zeros(length(t));\n   X = hcat(x,rand(length(x)));\n    m = fit(PHModel, X, enter, t, d, ties=\"efron\")\n   m2 = fit(PHModel, X, enter, t, d, ties=\"breslow\")\n   coeftable(m)\n\nNote on use of id keyword\n\nid is not needed in person-period structure data for standard estimates or confidence intervals\n\n  using Random, LSurvival\n     id, int, outt, dat =\n         LSurvival.dgm(MersenneTwister(123123), 100, 100; afun = LSurvival.int_0)\n     data = (\n             int = int,\n             outt = outt,\n             d = dat[:,4] .== 1,\n             x = dat[:,1],\n             z = dat[:,2]\n     )\n\n     f = @formula(Surv(int, outt,d)~x+z)\n     coxph(f, data)\n\nBUT, you must specify id to get appropriate robust variance and some other statistics.\n\nHere is an example where the same data are presented in two different ways, which should yield identical statistics when used in Cox model.\n\n dat1 = (\n    time = [1,1,6,6,8,9],\n    status = [1,0,1,1,0,1],\n    x = [1,1,1,0,0,0]\n  )\n  ft = coxph(@formula(Surv(time,status)~x),dat1)\n  bic(ft)\n  nobs(ft)\n  dof_residual(ft)\n  # lrtest is another one\n\n  stderror(ft)                     # model based\n  stderror(ft, type=\"robust\")   # robust standard error, based on dfbeta residuals\n  ft\n\n  # now using \"clustered\" data with multiple observations per individual\n dat1clust= (\n     id = [1,2,3,3,4,4,5,5,6,6],\n     enter = [0,0,0,1,0,1,0,1,0,1],\n     exit = [1,1,1,6,1,6,1,8,1,9],\n     status = [1,0,0,1,0,1,0,0,0,1],\n     x = [1,1,1,1,0,0,0,0,0,0]\n )\n \n # use the `id` parameter with the ID struct\n ft2 = coxph(@formula(Surv(enter, exit, status) ~ x),dat1clust, id=ID.(dat1clust.id))\n bic(ft2)                       # CORRECT        \n nobs(ft2)                      # CORRECT\n dof_residual(ft2)              # CORRECT\n  \n stderror(ft2)                  # model based (CORRECT)\n stderror(ft2, type=\"robust\")   # robust standard error, based on `id` level dfbeta residuals (CORRECT)\n # once robust SE is calculated, coefficient table uses the robust SE for confidence intervals and test statistics\n ft2   # CORRECT (compare to `ft` object)\n\nNOTE THE FOLLOWING IS INCORRECT because the id keyword is omitted\n\n ft2w = coxph(@formula(Surv(enter, exit, status) ~ x),dat1clust)\n bic(ft2w)                          # INCORRECT \n nobs(ft2w)                         # INCORRECT\n dof_residual(ft2w)                 # INCORRECT\n\n stderror(ft2w)                     # model based (CORRECT)\n stderror(ft2w, type=\"robust\")      # robust variance (INCORRECT)\n \n ft2w # the coefficient table now shows incorrect confidence intervals and test statistics\n  \n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.ddloglik!-Union{Tuple{D}, Tuple{Any, D, Vararg{Any, 6}}} where D<:AbstractSurvDist","page":"Help","title":"LSurvival.ddloglik!","text":"Hessian contribution for an observation in a parametric survival model\n\n    d = m.d\n    i = 1\n    enter = m.R.enter[i]\n    exit = m.R.exit[i]\n    y = m.R.y[i]\n    wts = m.R.wts[i]\n    x = m.P.X[i,:]\n    θ=[1,0,.4]\n\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.dgm-Tuple{MersenneTwister, Int64, Int64}","page":"Help","title":"LSurvival.dgm","text":"Generating discrete survival data without competing risks\n\nSignatures\n\ndgm(rng::MersenneTwister, n::Int, maxT:Int; afun = int_0, yfun = yprob, lfun = lprob)\n\ndgm(n::Int, maxT::Int; kwargs...)\n\nUsage: dgm(rng, n, maxT;afun=int0, yfun=yprob, lfun=lprob) dgm(n, maxT;afun=int0, yfun=yprob, lfun=lprob)\n\nWhere afun, yfun, and lfun are all functions that take arguments v,l,a and output time-specific values of a, y, and l respectively Example:\n\n\nexpit(mu) =  inv(1.0+exp(-mu))\n\nfunction aprob(v,l,a)\nexpit(-1.0 + 3*v + 2*l)\nend\n  \nfunction lprob(v,l,a)\nexpit(-3 + 2*v + 0*l + 0*a)\nend\n  \nfunction yprob(v,l,a)\nexpit(-3 + 2*v + 0*l + 2*a)\nend\n  # 10 individuals followed for up to 5 times\nLSurvival.dgm(10, 5;afun=aprob, yfun=yprob, lfun=lprob)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.dgm_comprisk-Tuple{MersenneTwister, Int64}","page":"Help","title":"LSurvival.dgm_comprisk","text":"Generating continuous survival data with competing risks\n\nSignatures\n\ndgm_comprisk(rng::MersenneTwister, n::Int)\n\ndgm_comprisk(n::Int)\n\n    - rng = random number generator    \n    - n = sample size\n\nExample:\n\nusing LSurvival\n# 100 individuals with two competing events\nz,x,t,d,event,weights = LSurvival.dgm_comprisk(100)\n    \n\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.dgm_phmodel-Tuple{MersenneTwister, Int64}","page":"Help","title":"LSurvival.dgm_phmodel","text":"Proportional hazards model from a Weibull distribution with scale parameter λ\n\ndgm_phmodel(rng::MersenneTwister, n::Int; \n    λ=1.25,\n    β=[0.0, 0.0]\n    )\n\nkeyword parameters:\n\nλ: Weibull scale parameter\nβ: vector of regression coefficients\n\nrng = MersenneTwister()\nX, t, d, _ = dgm_phmodel(2000; λ=1.25,β=[1.0, -0.5])\ncoxph(@formula(Surv(t0,t,d)~x+z), (t=t,t0=t.*0,d=d,x=X[:,1],z=X[:,2]))\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.dloglik!-Union{Tuple{D}, Tuple{Any, D, Vararg{Any, 6}}} where D<:AbstractSurvDist","page":"Help","title":"LSurvival.dloglik!","text":"Gradient contribution for an observation in a parametric survival model\n\n    d = m.d\n    i = 1\n    enter = m.R.enter[i]\n    exit = m.R.exit[i]\n    y = m.R.y[i]\n    wts = m.R.wts[i]\n    x = m.P.X[i,:]\n    θ=[1,0,.4]\n\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.dlpdf_gengamma-NTuple{4, Any}","page":"Help","title":"LSurvival.dlpdf_gengamma","text":"α=0.1 ρ =-1.2 κ=1.9 t = 2.0\n\nexp((log(t) - α)exp(-ρ) - ρ) - exp(κ - ρ) (α - log(t))exp(κ - ρ) + (log(t) - α)exp((log(t) - α)exp(-ρ) - ρ) - 1 (log(t) - α)exp(κ - ρ) - exp(κ)SpecialFunctions.digamma(exp(κ))\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.dlsurv_gengamma-NTuple{4, Any}","page":"Help","title":"LSurvival.dlsurv_gengamma","text":"α=0.1 ρ =-1.2 κ=1.9 t = 2.0 dlsurv_gengamma(α, ρ, κ, t; fd = 1e-14)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.jackknife-Tuple{M} where M<:AJSurv","page":"Help","title":"LSurvival.jackknife","text":"Obtain jackknife (leave-one-out) estimates from a Aalen-Johansen risk curve (risk at end of follow-up) by refitting the model n times\n\nSignatures\n\njackknife(m::M;kwargs...) where {M<:AJSurv}\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.jackknife-Tuple{M} where M<:KMSurv","page":"Help","title":"LSurvival.jackknife","text":"Obtain jackknife (leave-one-out) estimates from a Kaplan-Meier survival curve (survival at end of follow-up) by refitting the model n times\n\nSignatures\n\njackknife(m::M;kwargs...) where {M<:KMSurv}\n\nusing LSurvival, Random, StatsBase\n\ndat1 = (time = [1, 1, 6, 6, 8, 9], status = [1, 0, 1, 1, 0, 1], x = [1, 1, 1, 0, 0, 0])\n\ndat1clust = (\n  id = [1, 2, 3, 3, 4, 4, 5, 5, 6, 6],\n  enter = [0, 0, 0, 1, 0, 1, 0, 1, 0, 1],\n  exit = [1, 1, 1, 6, 1, 6, 1, 8, 1, 9],\n  status = [1, 0, 0, 1, 0, 1, 0, 0, 0, 1],\n  x = [1, 1, 1, 1, 0, 0, 0, 0, 0, 0],\n)\n\nm = kaplan_meier(dat1.time, dat1.status)\na = aalen_johansen(dat1.time, dat1.status)\nmc = kaplan_meier(dat1clust.enter, dat1clust.exit, dat1clust.status, id=ID.(dat1clust.id))\nac = aalen_johansen(dat1clust.enter, dat1clust.exit, dat1clust.status, id=ID.(dat1clust.id))\njk = jackknife(m);\njkc = jackknife(mc);\njka = jackknife(a);\nbs = bootstrap(mc, 100);\nstd(bs[:,1])\nstderror(m, type=\"jackknife\")\nstderror(mc, type=\"jackknife\")\n@assert jk == jkc\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.jackknife-Tuple{M} where M<:PHModel","page":"Help","title":"LSurvival.jackknife","text":"Obtain jackknife (leave-one-out) estimates from a Cox model by refitting the model n times\n\nusing LSurvival, Random, StatsBase\nid, int, outt, data =\nLSurvival.dgm(MersenneTwister(112), 100, 10; afun = LSurvival.int_0)\ndata[:, 1] = round.(data[:, 1], digits = 3)\nd, X = data[:, 4], data[:, 1:3]\nwt = rand(length(d))\nwt ./= (sum(wt) / length(wt))\nm = coxph(X,int, outt,d, wts=wt, id=ID.(id))\n\njk = jackknife(m);\nbs = bootstrap(MersenneTwister(12321), m, 1000);\nN = nobs(m)\n#comparing estimate with jackknife estimate with bootstrap mean\nhcat(coef(m), mean(jk, dims=1)[1,:], mean(bs, dims=1)[1,:])\nsemb = stderror(m)\nsebs = std(bs, dims=1)\nsero = stderror(m, type=\"robust\")\nsejk = stderror(m, type=\"jackknife\")\nsejk_manual = std(jk, dims=1, corrected=false) .* sqrt(N-1)\n\nsqrt.(diag(LSurvival.jackknife_vcov(m)))\n\nhcat(semb, sebs[1,:], sejk, sejk_manual[1,:], sero)\n\ndat1 = (time = [1, 1, 6, 6, 8, 9], status = [1, 0, 1, 1, 0, 1], x = [1, 1, 1, 0, 0, 0])\ndat1clust = (\n  id = [1, 2, 3, 3, 4, 4, 5, 5, 6, 6],\n  enter = [0, 0, 0, 1, 0, 1, 0, 1, 0, 1],\n  exit = [1, 1, 1, 6, 1, 6, 1, 8, 1, 9],\n  status = [1, 0, 0, 1, 0, 1, 0, 0, 0, 1],\n  x = [1, 1, 1, 1, 0, 0, 0, 0, 0, 0],\n)\n\nm = coxph(@formula(Surv(time, status)~x),dat1)\nmc = coxph(@formula(Surv(enter, exit, status)~x),dat1clust, id=ID.(dat1clust.id))\njk = jackknife(m);\njkc = jackknife(mc);\nbs = bootstrap(mc, 100);\nstd(bs[:,1])\nstderror(m, type=\"jackknife\")\nstderror(mc, type=\"jackknife\")\n@assert jk == jkc\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.kaplan_meier-Tuple{FormulaTerm, Any}","page":"Help","title":"LSurvival.kaplan_meier","text":"Kaplan-Meier estimator for cumulative conditional risk\n\nSignatures\n\nStatsBase.fit!(m::T; kwargs...) where {T<:AbstractNPSurv}\n\nkaplan_meier(enter::AbstractVector, exit::AbstractVector, y::AbstractVector,\n   ; kwargs...)\n\nKeyword arguments\n\nwts::Vector{<:Real} = similar(enter, 0); vector of case weights (or zero length vector) for each observation\nid::Vector{<:AbstractLSurvivalID} = [ID(i) for i in eachindex(y)]; Vector of AbstractSurvID objects denoting observations that form a single unit (used in bootstrap and jackknife methods)\natol = 0.00000001; absolute tolerance for defining tied event times\ncensval = 0;  value of the outcome to be considered a censored event\nkeepy = true; keep the outcome vector after fitting (may save memory with large datasets)\neps = 0.00000001; deprecated (replaced by atol)\n\nusing LSurvival\nusing Random\nz,x,t,d, event,wt = LSurvival.dgm_comprisk(MersenneTwister(1212), 1000);\nenter = zeros(length(t));\nm = fit(KMSurv, enter, t, d)\nmw = fit(KMSurv, enter, t, d, wts=wt)\n\nor, equivalently:\n\nkaplan_meier(enter, t, d, wts=wt)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lgh!-Union{Tuple{M}, Tuple{M, Any}} where M<:PSModel","page":"Help","title":"LSurvival.lgh!","text":"dat1 = (time = [1, 1, 6, 6, 8, 9], status = [1, 0, 1, 1, 0, 1], x = [1, 1, 1, 0, 0, 0]) enter = zeros(length(dat1.time)) t = dat1.time d = dat1.status X = hcat(ones(length(dat1.x)), dat1.x) wt = ones(length(t))\n\ndist = Exponential() P = PSParms(X[:,1:1], extraparms=length(dist)-1) P = PSParms(X, extraparms=length(dist)-1) P.B P.grad R = LSurvivalResp(dat1.time, dat1.status)    # specification with ID only m = PSModel(R,P,dist)\n\nλ=1 θ = rand(2) lgh!(m, θ) θ .+= inv(-m.P.hess) * m.P.grad * λ\n\nlgh!(m, θ .+ [-.00, 0, 0]) lgh!(m, θ .+ [-.01, 0.05, 0.05])\n\nm.P._LL\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lgh_breslow!-Union{Tuple{M}, Tuple{M, Any, Any, Any}} where M<:AbstractPH","page":"Help","title":"LSurvival.lgh_breslow!","text":"Update the partial likelihood, gradient and Hessian values from a Cox model fit (used during fitting, not generally useful for users).\n\nUses Breslow's partial likelihood.\n\nUpdates over all observations\n\nSignature\n\nlgh_breslow!(m::M, j, caseidx, risksetidx) where {M<:AbstractPH}\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lgh_efron!-Union{Tuple{M}, Tuple{M, Any, Any, Any}} where M<:AbstractPH","page":"Help","title":"LSurvival.lgh_efron!","text":"Update the partial likelihood, gradient and Hessian values from a Cox model fit (used during fitting, not generally useful for users).\n\nUses Efron's partial likelihood.\n\nUpdates over all observations\n\nSignature\n\nlgh_efron!(m::M, j, caseidx, risksetidx) where {M<:AbstractPH}\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.loglik-Union{Tuple{D}, Tuple{D, Vararg{Any, 6}}} where D<:AbstractSurvDist","page":"Help","title":"LSurvival.loglik","text":"Log likelihood contribution for an observation in a parametric survival model\n\n    d = m.d\n    i = 1\n    enter = m.R.enter[i]\n    exit = m.R.exit[i]\n    y = m.R.y[i]\n    wts = m.R.wts[i]\n    x = m.P.X[i,:]\n    θ=[1,0,.4]\n    \n    m.P._B\n\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lpdf-Tuple{LSurvival.Exponential, Any, Any, Any}","page":"Help","title":"LSurvival.lpdf","text":"Log-likelihood calculation for Exponential regression: PDF\n\nβ = [-2, 1.2]\nx = [2,.1]\nρ = -0.5\nt = 3.0\nα = dot(β,x)\nd = Exponential()\nlpdf_gradient(d, θ, t, x)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lpdf-Tuple{LSurvival.Exponential, Any}","page":"Help","title":"LSurvival.lpdf","text":"Log probability distribution function: Exponential distribution\n\n    β = [-2, 1.2]\n    x = [2,.1]\n    ρ = -0.5\n    t = 3.0\n    α = dot(β,x)\n    d = Exponential()\n    lpdf(d, t)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lpdf-Tuple{LSurvival.GGamma, Any, Any, Any}","page":"Help","title":"LSurvival.lpdf","text":"log probability distribution for generalized gamma regression\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lpdf-Tuple{LSurvival.GGamma, Any}","page":"Help","title":"LSurvival.lpdf","text":"log probability distribution function, generalized gamma distribution\n\nLocation scale representation (Klein Moeschberger ch 12)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lpdf-Tuple{LSurvival.Gamma, Any, Any, Any}","page":"Help","title":"LSurvival.lpdf","text":"log probability distribution for Gamma regression\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lpdf-Tuple{LSurvival.Gamma, Any}","page":"Help","title":"LSurvival.lpdf","text":"log probability distribution function, Gamma distribution\n\nLocation scale representation (Klein Moeschberger ch 12)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lpdf-Tuple{LSurvival.Lognormal, Any, Any, Any}","page":"Help","title":"LSurvival.lpdf","text":"Log likelihood calculation for Lognormal regression: PDF\n\nβ = [-2, 1.2]\nx = [2,.1]\nρ = -0.5\nt = 3.0\nα = dot(β,x)\nd = Lognormal()\nlpdf(d, vcat(θ,ρ), t, x)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lpdf-Tuple{LSurvival.Lognormal, Any}","page":"Help","title":"LSurvival.lpdf","text":"log probability distribution function: Weibull distribution\n\nLocation scale representation (Klein Moeschberger ch 12)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lpdf-Tuple{LSurvival.Weibull, Any, Any, Any}","page":"Help","title":"LSurvival.lpdf","text":"Log-likelihood calculation for weibull regression: PDF\n\nβ = [-2, 1.2]\nx = [2,.1]\nρ = -0.5\nt = 3.0\nα = dot(β,x)\nd = Weibull()\nlpdf(d, vcat(θ,ρ), t, x)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lpdf-Tuple{LSurvival.Weibull, Any}","page":"Help","title":"LSurvival.lpdf","text":"Log probability distribution function: Weibull distribution\n\nlocation scale representation (Klein Moeschberger ch 12)\n\nα=0.1   # location\nρ=-1.2  # log(scale)\ntime=2\nlpdf(Weibull(α, ρ), time)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lpdf_gradient-Tuple{LSurvival.Exponential, Any, Any, Any}","page":"Help","title":"LSurvival.lpdf_gradient","text":"Gradient calculation for Exponential regression: PDF\n\nβ = [-2, 1.2]\nx = [2,.1]\nρ = -0.5\nt = 3.0\nα = dot(β,x)\nd = Exponential()\nlpdf_gradient(d, θ, t, x)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lpdf_gradient-Tuple{LSurvival.GGamma, Any, Any, Any}","page":"Help","title":"LSurvival.lpdf_gradient","text":"log probability distribution gradient for generalized gamma regression     analytic gradient\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lpdf_gradient-Tuple{LSurvival.Gamma, Any, Any, Any}","page":"Help","title":"LSurvival.lpdf_gradient","text":"log probability distribution gradient for Gamma regression     analytic gradient\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lpdf_gradient-Tuple{LSurvival.Lognormal, Any, Any, Any}","page":"Help","title":"LSurvival.lpdf_gradient","text":"Gradient calculation for Lognormal regression: PDF\n\nβ = [-2, 1.2]\nx = [2,.1]\nρ = -0.5\nt = 3.0\nα = dot(β,x)\nd = Lognormal()\nlpdf_gradient(d, vcat(θ,ρ), t, x)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lpdf_gradient-Tuple{LSurvival.Weibull, Any, Any, Any}","page":"Help","title":"LSurvival.lpdf_gradient","text":"Gradient calculation for weibull regression: PDF\n\nβ = [-2, 1.2]\nx = [2,.1]\nρ = -0.5\nt = 3.0\n#α = dot(β,x)\nd = Weibull()\nlpdf_gradient(d, vcat(θ,ρ), t, x)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lpdf_hessian-Tuple{LSurvival.Exponential, Any, Any, Any}","page":"Help","title":"LSurvival.lpdf_hessian","text":"Hessian calculation for Exponential regression: PDF\n\nβ = [-2, 1.2]\nx = [2,.1]\nρ = -0.5\nt = 3.0\nα = dot(β,x)\nd = Exponential()\nlpdf_hessian(d, θ, t, x)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lpdf_hessian-Tuple{LSurvival.Exponential, Any}","page":"Help","title":"LSurvival.lpdf_hessian","text":"Hessian calculation for Weibull distribution: PDF\n\nβ = [-2, 1.2]\nx = [2,.1]\nρ = -0.5\nt = 3.0\nα = dot(β,x)\nd = Exponential(α)\nlpdf_hessian(d, t)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lpdf_hessian-Tuple{LSurvival.GGamma, Any, Any, Any}","page":"Help","title":"LSurvival.lpdf_hessian","text":"Hessian calculation for generalized gamma regression: PDF\n\nplaceholder function: returns nothing\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lpdf_hessian-Tuple{LSurvival.GGamma, Any}","page":"Help","title":"LSurvival.lpdf_hessian","text":"Hessian calculation for generalized gamma distribution: PDF\n\nplaceholder function: returns nothing\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lpdf_hessian-Tuple{LSurvival.Gamma, Any, Any, Any}","page":"Help","title":"LSurvival.lpdf_hessian","text":"Hessian calculation for Gamma regression: PDF\n\nplaceholder function: returns nothing\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lpdf_hessian-Tuple{LSurvival.Gamma, Any}","page":"Help","title":"LSurvival.lpdf_hessian","text":"Hessian calculation for Gamma distribution: PDF\n\nplaceholder function: returns nothing\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lpdf_hessian-Tuple{LSurvival.Lognormal, Any, Any, Any}","page":"Help","title":"LSurvival.lpdf_hessian","text":"Hessian calculation for Log-normal regression: PDF\n\nβ = [-2, 1.2]\nx = [2,.1]\nρ = -0.5\nt = 3.0\nα = dot(β,x)\nd = Lognormal()\nlpdf_hessian(d, vcat(θ,ρ), t, x)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lpdf_hessian-Tuple{LSurvival.Lognormal, Any}","page":"Help","title":"LSurvival.lpdf_hessian","text":"Hessian calculation for Log-normal distribution: PDF\n\nβ = [-2, 1.2]\nx = [2,.1]\nρ = -0.5\nt = 3.0\nα = dot(β,x)\nd = Lognormal(α, ρ)\nlpdf_hessian(d, t)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lpdf_hessian-Tuple{LSurvival.Weibull, Any, Any, Any}","page":"Help","title":"LSurvival.lpdf_hessian","text":"Hessian calculation for weibull regression: PDF\n\nβ = [-2, 1.2]\nx = [2,.1]\nρ = -0.5\nt = 3.0\nα = dot(β,x)\nd = Weibull()\nlpdf_hessian(d, vcat(θ,ρ), t, x)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lpdf_weibull-Tuple{Any, Any, Any}","page":"Help","title":"LSurvival.lpdf_weibull","text":"α = -1.2 ρ = 1.8 t = 4.3 z = (log(t) - α) * exp(-ρ) z - exp(z) - ρ - log(t)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lsurv-Tuple{LSurvival.Exponential, Any, Any, Any}","page":"Help","title":"LSurvival.lsurv","text":"Log-likelihood calculation for Exponential regression: Survival\n\nβ = [-2, 1.2]\nx = [2,.1]\nρ = -0.5\nt = 3.0\nα = dot(β,x)\nd = Exponential()\nlsurv(d, θ, t, x)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lsurv-Tuple{LSurvival.Exponential, Any}","page":"Help","title":"LSurvival.lsurv","text":"Log survival function: Exponential distribution\n\n    β = [-2, 1.2]\n    x = [2,.1]\n    ρ = -0.5\n    t = 3.0\n    α = dot(β,x)\n    d = Exponential()\n    lsurv(d, t)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lsurv-Tuple{LSurvival.GGamma, Any, Any, Any}","page":"Help","title":"LSurvival.lsurv","text":"log survival distribution for generalized gamma regression\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lsurv-Tuple{LSurvival.GGamma, Any}","page":"Help","title":"LSurvival.lsurv","text":"log probability distribution function, generalized gamma distribution\n\nLocation scale representation (Klein Moeschberger ch 12)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lsurv-Tuple{LSurvival.Gamma, Any, Any, Any}","page":"Help","title":"LSurvival.lsurv","text":"log survival distribution for Gamma regression\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lsurv-Tuple{LSurvival.Gamma, Any}","page":"Help","title":"LSurvival.lsurv","text":"log probability distribution function, Gamma distribution\n\nLocation scale representation (Klein Moeschberger ch 12)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lsurv-Tuple{LSurvival.Lognormal, Any, Any, Any}","page":"Help","title":"LSurvival.lsurv","text":"Log likelihood calculation for Log-normal regression: Survival\n\nβ = [-2, 1.2]\nx = [2,.1]\nρ = -0.5\nt = 3.0\nα = dot(β,x)\nd = Lognormal()\nlsurv(d, vcat(θ,ρ), t, x)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lsurv-Tuple{LSurvival.Lognormal, Any}","page":"Help","title":"LSurvival.lsurv","text":"log probability distribution function: Weibull distribution\n\nLocation scale representation (Klein Moeschberger ch 12)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lsurv-Tuple{LSurvival.Weibull, Any, Any, Any}","page":"Help","title":"LSurvival.lsurv","text":"Log-likelihood calculation for weibull regression: Survival\n\nβ = [-2, 1.2]\nx = [2,.1]\nρ = -0.5\nt = 3.0\nα = dot(β,x)\nd = Weibull()\nlsurv(d, vcat(θ,ρ), t, x)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lsurv-Tuple{LSurvival.Weibull, Any}","page":"Help","title":"LSurvival.lsurv","text":"Log survival distribution function: Weibull distribution\n\nlocation, log(scale) representation (Klein Moeschberger ch 12)\n\nα=0.1   # location\nρ=-1.2  # log(scale)\ntime=2\nlsurv(Weibull(α, ρ), time)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lsurv_gradient-Tuple{LSurvival.Exponential, Any, Any, Any}","page":"Help","title":"LSurvival.lsurv_gradient","text":"Gradient calculation for Exponential regression: Survival\n\nβ = [-2, 1.2]\nx = [2,.1]\nρ = -0.5\nt = 3.0\nα = dot(β,x)\nd = Exponential()\nlsurv_gradient(d, θ, t, x)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lsurv_gradient-Tuple{LSurvival.GGamma, Any, Any, Any}","page":"Help","title":"LSurvival.lsurv_gradient","text":"log survival distribution gradient for generalized gamma regression     uses finite differences\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lsurv_gradient-Tuple{LSurvival.Gamma, Any, Any, Any}","page":"Help","title":"LSurvival.lsurv_gradient","text":"log survival distribution gradient for Gamma regression     uses finite differences\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lsurv_gradient-Tuple{LSurvival.Lognormal, Any, Any, Any}","page":"Help","title":"LSurvival.lsurv_gradient","text":"Gradient calculation for Log-normal regression: Survival\n\nβ = [-2, 1.2]\nx = [2,.1]\nρ = -0.5\nt = 3.0\nα = dot(β,x)\nd = Lognormal()\nlsurv_gradient(d, vcat(θ,ρ), t, x)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lsurv_gradient-Tuple{LSurvival.Weibull, Any, Any, Any}","page":"Help","title":"LSurvival.lsurv_gradient","text":"Gradient calculation for weibull regression: Survival\n\nβ = [-2, 1.2]\nx = [2,.1]\nρ = -0.5\nt = 3.0\nα = dot(β,x)\nd = Weibull()\nlsurv_gradient(d, vcat(θ,ρ), t, x)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lsurv_hessian-Tuple{LSurvival.Exponential, Any, Any, Any}","page":"Help","title":"LSurvival.lsurv_hessian","text":"Hessian calculation for Exponential regression: Survival\n\nβ = [-2, 1.2]\nx = [2,.1]\nρ = -0.5\nt = 3.0\nα = dot(β,x)\nd = Exponential()\nlsurv_hessian(d, θ, t, x)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lsurv_hessian-Tuple{LSurvival.Exponential, Any}","page":"Help","title":"LSurvival.lsurv_hessian","text":"Hessian calculation for Exponential distribution: Survival\n\nβ = [-2, 1.2]\nx = [2,.1]\nρ = -0.5\nt = 3.0\nα = dot(β,x)\nd = Exponential(α)\nlsurv_hessian(d, t)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lsurv_hessian-Tuple{LSurvival.GGamma, Any, Any, Any}","page":"Help","title":"LSurvival.lsurv_hessian","text":"Hessian calculation for generalized gamma regression: Survival\n\nplaceholder function: returns nothing\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lsurv_hessian-Tuple{LSurvival.GGamma, Any}","page":"Help","title":"LSurvival.lsurv_hessian","text":"Hessian calculation for generalized gamma distribution: Survival\n\nplaceholder function: returns nothing\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lsurv_hessian-Tuple{LSurvival.Gamma, Any, Any, Any}","page":"Help","title":"LSurvival.lsurv_hessian","text":"Hessian calculation for Gamma regression: Survival\n\nplaceholder function: returns nothing\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lsurv_hessian-Tuple{LSurvival.Gamma, Any}","page":"Help","title":"LSurvival.lsurv_hessian","text":"Hessian calculation for Gamma distribution: Survival\n\nplaceholder function: returns nothing\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lsurv_hessian-Tuple{LSurvival.Lognormal, Any, Any, Any}","page":"Help","title":"LSurvival.lsurv_hessian","text":"Hessian calculation for Log-normal regression: Survival\n\nβ = [-2, 1.2]\nx = [2,.1]\nρ = -0.5\nt = 3.0\nα = dot(β,x)\nd = Lognormal()\nlsurv_hessian(d, vcat(θ,ρ), t, x)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lsurv_hessian-Tuple{LSurvival.Lognormal, Any}","page":"Help","title":"LSurvival.lsurv_hessian","text":"Hessian calculation for Log-normal distribution: Survival\n\nβ = [-2, 1.2]\nx = [2,.1]\nρ = -0.5\nt = 3.0\nα = dot(β,x)\nd = Lognormal(α, ρ)\nlsurv_hessian(d, t)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lsurv_hessian-Tuple{LSurvival.Weibull, Any, Any, Any}","page":"Help","title":"LSurvival.lsurv_hessian","text":"Hessian calculation for weibull regression: Survival\n\nβ = [-2, 1.2]\nx = [2,.1]\nρ = -0.5\nt = 3.0\nα = dot(β,x)\nd = Weibull()\nlsurv_hessian(d, vcat(θ,ρ), t, x)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.lsurv_hessian-Tuple{LSurvival.Weibull, Any}","page":"Help","title":"LSurvival.lsurv_hessian","text":"Hessian calculation for Weibull distribution: Survival\n\nβ = [-2, 1.2]\nx = [2,.1]\nρ = -0.5\nt = 3.0\nα = dot(β,x)\nd = Weibull(α, ρ)\nlsurv_hessian(d, t)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.qstdnorm-Tuple{Any}","page":"Help","title":"LSurvival.qstdnorm","text":"quantile function for a standard normal distribution     depends on SpecialFunctions     https://en.wikipedia.org/wiki/Normal_distribution\n\nSource code, example:\n\n    qstdnorm(p) = sqrt(2) * SpecialFunctions.erfinv(2.0 * p - 1.0)\n    \n    qstdnorm(.975)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.qweibull-Tuple{Any, Any, Any}","page":"Help","title":"LSurvival.qweibull","text":"Quantile function for the Weibull distribution\n\nF(t) = egincases\n     1 - e^-tρ^α t  0\n     0 t  0\nndcases\nQ(p) = ρ * (log(1(1-p))^1α)\n\nlightweight function used for simulation\n\nNote that there is no checking that parameters α,ρ are positively bound, and p ∈ (0,1), and errors will be given if this is not the case\n\nSignature:\n\nqweibull(p::Real,α::Real,ρ::Real)\n\nSource code, example:\n\nqweibull(p, α, ρ) = ρ * ((-log1p(-p))^(1 / α))\n\n# cross reference the approach in the Distributions package\nquantile(Distributions.Weibull(.75, 1.1), .3)\nLSurvival.qweibull(0.3, .75, 1.1)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.randweibull-Tuple{Any, Any, Any}","page":"Help","title":"LSurvival.randweibull","text":"Random draw from Weibull distribution\n\nlightweight function used for simulation\n\nNote that there is no checking that parameters α,ρ are positively bound, and errors will be given if this is not the case\n\nSignatures:\n\nrandweibull(rng::MersenneTwister,α::Real,ρ::Real)\nrandweibull(α::Real,ρ::Real)\n\nSource code, example:\n\nrandweibull(rng, α, ρ) = qweibull(rand(rng), α, ρ)\nrandweibull(α, ρ) = randweibull(MersenneTwister(), α, ρ)\n\n# cross reference the approach in the Distributions package\nrand(Distributions.Weibull(.75, 1.1))\nrandweibull(.75, 1.1)\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.risk_from_coxphmodels-Union{Tuple{T}, Tuple{Vector{T}, Vararg{Any}}} where T<:PHModel","page":"Help","title":"LSurvival.risk_from_coxphmodels","text":"Survival curve estimation using multiple cox models\n\nSignatures\n\n  risk_from_coxphmodels(fitlist::Vector{T}, args...; kwargs...) where {T<:PHModel}\n\n  fit(::Type{M}, fitlist::Vector{T}, ; fitargs...) where {M<:PHSurv,T<:PHModel}\n\nOptional keywords\n\ncoef_vectors = nothing(default) or vector of coefficient vectors from the cox models [will default to the coefficients from fitlist models]\npred_profile = nothing(default) or vector of specific predictor values of the same length as the coef_vectors[1]\n\n using LSurvival\n using Random\n # event variable is coded 0[referent],1,2\n z,x,t,d, event,wt = LSurvival.dgm_comprisk(MersenneTwister(1212), 1000);\n enter = zeros(length(t));\n\n ft1 = coxph(hcat(x,z), enter, t, (event .== 1))\n nidx = findall(event .!= 1)\n ft2 = coxph(hcat(x,z)[nidx,:], enter[nidx], t[nidx], (event[nidx] .== 2))\n\n # risk at referent levels of `x` and `z`\n risk_from_coxphmodels([ft1,ft2])\n\n # risk at average levels of `x` and `z`\n mnx = sum(x)/length(x)\n mnz = sum(z)/length(z)\n # equivalent\n fit(PHSurv, [ft1,ft2], pred_profile=[mnx,mnz])\n risk_from_coxphmodels([ft1,ft2], pred_profile=[mnx,mnz])\n\n\n\n\n\n","category":"method"},{"location":"#LSurvival.survivaldata-Tuple","page":"Help","title":"LSurvival.survivaldata","text":"Loading example survival analysis datasets\n\nusing LSurvival, Plots # note Plots does not install by default\nheartdata, heartmeta = survivaldata(\"heart\")\nft = coxph(@formula(Surv(start, stop, event)~surgery), heartdata);\n# plot baseline cumulative hazard\nbasehazplot(ft)\n# plot Schoenfeld residuals\ncoxdx(ft)  \n\n\n\n\n\n","category":"method"},{"location":"#RecipesBase.apply_recipe-Tuple{AbstractDict{Symbol, Any}, AJSurv}","page":"Help","title":"RecipesBase.apply_recipe","text":"Recipe for aalen-johansen risk curve\n\n    using Plots, LSurvival\n    res = z, x, outt, d, event, weights = LSurvival.dgm_comprisk(MersenneTwister(123123), 100)\n    int = zeros(length(d)) # no late entry\n    \n        c = fit(AJSurv, int, outt, event)\n        #risk2 = aalen_johansen(int, outt, event)\n        plot(c)\n\n\n\n\n\n","category":"method"},{"location":"#RecipesBase.apply_recipe-Tuple{AbstractDict{Symbol, Any}, KMSurv}","page":"Help","title":"RecipesBase.apply_recipe","text":"Plotting a kaplan meier curve\n\n    using Plots, LSurvival\ndat4 = (\n    id = [1, 1, 2, 2, 2, 3, 4, 5, 5, 6],\n    enter = [1, 2, 5, 4, 6, 7, 3, 6, 8, 0],\n    exit = [2, 5, 6, 7, 8, 9, 6, 8, 14, 9],\n    status = [0, 1, 0, 0, 1, 0, 1, 0, 0, 1],\n    x = [0.1, 0.1, 1.5, 1.5, 1.5, 0, 0, 0, 0, 3],\n    z = [1, 1, 0, 0, 0, 0, 0, 1, 1, 0],\n    w = [0, 0, 0, 0, 0, 1, 1, 1, 1, 0],\n)\nR = LSurvivalResp(dat4.enter, dat4.exit, dat4.status)\n    k = kaplan_meier(dat4.enter, dat4.exit, dat4.status)\n    plot(k)\n\n\n\n\n\n","category":"method"},{"location":"#RecipesBase.apply_recipe-Tuple{AbstractDict{Symbol, Any}, LSurvival.AFTdist}","page":"Help","title":"RecipesBase.apply_recipe","text":"function name(::Type{T}) where {T}\n    #https://stackoverflow.com/questions/70043313/get-simple-name-of-type-in-julia\n    isempty(T.parameters) ? T : T.name.wrapper\nend\n\nusing Plots, LSurvival\ndat2 = (\n    enter = [1, 2, 5, 2, 1, 7, 3, 4, 8, 8],\n    exit = [2, 3, 6, 7, 8, 9, 9, 9, 14, 17],\n    status = [1, 1, 1, 1, 1, 1, 1, 0, 0, 0],\n    x = [1, 0, 0, 1, 0, 1, 1, 1, 0, 0],\n)\nfte = survreg(@formula(Surv(enter, exit, status)~x), dat2)\n\n# density function\naftdist(fte, label=\"X=0\")\naftdist!(fte, covlevels=[1.0, 2.0], color=\"red\", label=\"X=1\")\n\n# Survival function\naftdist(fte, type=\"surv\", label=\"X=0\")\naftdist!(fte, type=\"surv\", covlevels=[1.0, 2.0], color=\"red\", label=\"X=1\")\n\n# hazard function\naftdist(fte, type=\"haz\", label=\"X=0\")\naftdist!(fte, type=\"haz\", covlevels=[1.0, 2.0], color=\"red\", label=\"X=1\")\n\n# Cumulative incidence/risk function\naftdist(fte, type=\"risk\", label=\"X=0\")\naftdist!(fte, type=\"risk\", covlevels=[1.0, 2.0], color=\"red\", label=\"X=1\")\n\n\n\n\n\n\n","category":"method"},{"location":"#RecipesBase.apply_recipe-Tuple{AbstractDict{Symbol, Any}, LSurvival.BaseHazPlot}","page":"Help","title":"RecipesBase.apply_recipe","text":"Plotting baseline hazard for a Cox model\n\nusing Plots, LSurvival\ndat2 = (\n    enter = [1, 2, 5, 2, 1, 7, 3, 4, 8, 8],\n    exit = [2, 3, 6, 7, 8, 9, 9, 9, 14, 17],\n    status = [1, 1, 1, 1, 1, 1, 1, 0, 0, 0],\n    x = [1, 0, 0, 1, 0, 1, 1, 1, 0, 0],\n)\nfte = coxph(@formula(Surv(enter, exit, status)~x), dat2, maxiter=0)\nftb = coxph(@formula(Surv(enter, exit, status)~x), dat2, ties=\"breslow\", maxiter=0)\n\nplot(fte, label=\"Efron\")\nplot!(ftb, label=\"Breslow\")\n\n\n\n\n\n","category":"method"},{"location":"#RecipesBase.apply_recipe-Tuple{AbstractDict{Symbol, Any}, LSurvival.CoxDX}","page":"Help","title":"RecipesBase.apply_recipe","text":"\nusing Plots, LSurvival\ndat2 = (\n    enter = [1, 2, 5, 2, 1, 7, 3, 4, 8, 8],\n    exit = [2, 3, 6, 7, 8, 9, 9, 9, 14, 17],\n    status = [1, 1, 1, 1, 1, 1, 1, 0, 0, 0],\n    x = [1, 0, 0, 1, 0, 1, 1, 1, 0, 0],\n)\nfte = coxph(@formula(Surv(enter, exit, status)~x), dat2)\n\ncoxdx(fte)\n\n\n\n\n\n\n","category":"method"},{"location":"#RecipesBase.apply_recipe-Tuple{AbstractDict{Symbol, Any}, LSurvival.CoxInfluence}","page":"Help","title":"RecipesBase.apply_recipe","text":"using Plots, LSurvival\ndat2 = (\n    enter = [1, 2, 5, 2, 1, 7, 3, 4, 8, 8],\n    exit = [2, 3, 6, 7, 8, 9, 9, 9, 14, 17],\n    status = [1, 1, 1, 1, 1, 1, 1, 0, 0, 0],\n    x = [1, 0, 0, 1, 0, 1, 1, 1, 0, 0],\n)\nfte = coxph(@formula(Surv(enter, exit, status)~x), dat2)\n\ncoxinfluence(fte, type=\"jackknife\", par=1)\ncoxinfluence!(fte, type=\"dfbeta\", color=:red, par=1)\n\n\n\n\n\n\n","category":"method"},{"location":"#RecipesBase.apply_recipe-Tuple{AbstractDict{Symbol, Any}, LSurvival.LognLogPlot}","page":"Help","title":"RecipesBase.apply_recipe","text":"Plotting baseline hazard for a Cox model\n\nusing Plots, LSurvival\ndat4 = (\n    id = [1, 1, 2, 2, 2, 3, 4, 5, 5, 6],\n    enter = [1, 2, 5, 4, 6, 7, 3, 6, 8, 0],\n    exit = [2, 5, 6, 7, 8, 9, 6, 8, 14, 9],\n    status = [0, 1, 0, 0, 1, 0, 1, 0, 0, 1],\n    x = [0.1, 0.1, 1.5, 1.5, 1.5, 0, 0, 0, 0, 3],\n    z = [1, 1, 0, 0, 0, 0, 0, 1, 1, 0],\n    w = [0, 0, 0, 0, 0, 1, 1, 1, 1, 0],\n)\n\nk = kaplan_meier(dat4.enter, dat4.exit, dat4.status)\n\nlognlogplot(k)\n\n\n\n\n\n","category":"method"},{"location":"#RecipesBase.apply_recipe-Tuple{AbstractDict{Symbol, Any}, LSurvivalResp}","page":"Help","title":"RecipesBase.apply_recipe","text":"Plotting LSurvivalResp objects (outcomes in cox models, kaplan meier curves, parametric survival models)\n\nRecipe for plotting time-to-event outcomes\n\nusing Plots, LSurvival\n\ndat4 = (\n    id = [1, 1, 2, 2, 2, 3, 4, 5, 5, 6],\n    enter = [1, 2, 5, 4, 6, 7, 3, 6, 8, 0],\n    exit = [2, 5, 6, 7, 8, 9, 6, 8, 14, 9],\n    status = [0, 1, 0, 0, 1, 0, 1, 0, 0, 1],\n    x = [0.1, 0.1, 1.5, 1.5, 1.5, 0, 0, 0, 0, 3],\n    z = [1, 1, 0, 0, 0, 0, 0, 1, 1, 0],\n    w = [0, 0, 0, 0, 0, 1, 1, 1, 1, 0],\n)\nR = LSurvivalResp(dat4.enter, dat4.exit, dat4.status)\nplot([[R.enter[i], R.exit[i]] for i in eachindex(R.enter)], [[i, i] for i in values(R.id)])\n\n\n\n\n\n","category":"method"},{"location":"#RecipesBase.apply_recipe-Tuple{AbstractDict{Symbol, Any}, PHSurv}","page":"Help","title":"RecipesBase.apply_recipe","text":"Recipe for cox-model based risk curves\n\n    using Plots, LSurvival, Random, StatsBase\n    res = z, x, outt, d, event, wts = LSurvival.dgm_comprisk(MersenneTwister(123123), 100)\n    X = hcat(z, x)\n    int = zeros(length(d)) # no late entry\n    ft1 = fit(PHModel, X, int, outt, d .* (event .== 1), wts=wts)\n    ft2 = fit(PHModel, X, int, outt, d .* (event .== 2), wts=wts)\n    c = risk_from_coxphmodels([ft1, ft2], pred_profile = mean(X, dims=1))\n    \n    plot(c)\n\n\n\n\n\n","category":"method"},{"location":"#StatsAPI.confint-Tuple{AJSurv}","page":"Help","title":"StatsAPI.confint","text":"Greenwood's formula for variance and confidence intervals of a Aalen-Johansen risk function\n\nSignatures:\n\nStatsBase.stderror(m::AJSurv)\n\nStatsBase.confint(m:AJSurv; level=0.95, method=\"normal\")\n\nKeyword arguments\n\nmethod\n\"normal\" normality-based confidence intervals\n\"lognlog\" log(-log(S(t))) based confidence intervals\n\nres = z, x, outt, d, event, wts = LSurvival.dgm_comprisk(MersenneTwister(123123), 100)\nint = zeros(length(d)) # no late entry\nm = fit(AJSurv, int, outt, event)\nstderror(m)\nconfint(m, level=0.95)\n\n\n\n\n\n","category":"method"},{"location":"#StatsAPI.confint-Tuple{KMSurv}","page":"Help","title":"StatsAPI.confint","text":"Greenwood's formula for variance and confidence intervals of a Kaplan-Meier survival curve\n\nSignatures:\n\nStatsBase.stderror(m::KMSurv)\n\nStatsBase.confint(m:KMSurv; level=0.95, method=\"normal\")\n\nKeyword arguments\n\nmethod:\n\n\"normal\" normality-based confidence intervals\n\"lognlog\" log(-log(S(t))) based confidence intervals\n\nusing LSurvival\nusing Random\nz,x,t,d, event,wt = LSurvival.dgm_comprisk(MersenneTwister(1212), 1000);\nenter = zeros(length(t));\nm = fit(KMSurv, enter, t, d)\nmw = fit(KMSurv, enter, t, d, wts=wt)\nstderror(m)\nconfint(m, method=\"normal\")\nconfint(m, method=\"lognlog\") # log-log transformation\n\n\n\n\n\n","category":"method"},{"location":"#StatsAPI.confint-Tuple{M} where M<:AbstractPH","page":"Help","title":"StatsAPI.confint","text":"using LSurvival\n dat1= (\n   time = [1,1,6,6,8,9],\n   status = [1,0,1,1,0,1],\n   x = [1,1,1,0,0,0]\n )\n\n ft = coxph(@formula(Surv(time, status) ~ x),dat1, keepx=true)\n # model-based variance\n confint(ft)\n\n # robust variance\n confint(ft, type=\"robust\")\n\nfor cluster confidence intervals\n\n dat1clust= (\n   id = [1,2,3,3,4,4,5,5,6,6],\n   enter = [0,0,0,1,0,1,0,1,0,1],\n   exit = [1,1,1,6,1,6,1,8,1,9],\n   status = [1,0,0,1,0,1,0,0,0,1],\n   x = [1,1,1,1,0,0,0,0,0,0]\n )\n\n ft2 = coxph(@formula(Surv(enter, exit, status) ~ x),dat1clust, id=ID.(dat1clust.id), keepx=true)\n # model-based variance\n confint(ft2)\n\n # robust variance\n confint(ft2, type=\"robust\")\n\n\n\n\n\n","category":"method"},{"location":"#StatsAPI.fit!-Tuple{T} where T<:AbstractNPSurv","page":"Help","title":"StatsAPI.fit!","text":"Kaplan-Meier estimator for cumulative conditional risk\n\nSignatures\n\nStatsBase.fit!(m::T; kwargs...) where {T<:AbstractNPSurv}\n\nkaplan_meier(enter::AbstractVector, exit::AbstractVector, y::AbstractVector,\n   ; kwargs...)\n\nKeyword arguments\n\nwts::Vector{<:Real} = similar(enter, 0); vector of case weights (or zero length vector) for each observation\nid::Vector{<:AbstractLSurvivalID} = [ID(i) for i in eachindex(y)]; Vector of AbstractSurvID objects denoting observations that form a single unit (used in bootstrap and jackknife methods)\natol = 0.00000001; absolute tolerance for defining tied event times\ncensval = 0;  value of the outcome to be considered a censored event\nkeepy = true; keep the outcome vector after fitting (may save memory with large datasets)\neps = 0.00000001; deprecated (replaced by atol)\n\nusing LSurvival\nusing Random\nz,x,t,d, event,wt = LSurvival.dgm_comprisk(MersenneTwister(1212), 1000);\nenter = zeros(length(t));\nm = fit(KMSurv, enter, t, d)\nmw = fit(KMSurv, enter, t, d, wts=wt)\n\nor, equivalently:\n\nkaplan_meier(enter, t, d, wts=wt)\n\nAalen-Johansen estimator for cumulative cause-specific risk (in the presence of competing events)\n\nSignatures\n\n StatsBase.fit!(m::T; kwargs...) where {T<:AbstractNPSurv}\n\n aalen_johansen(enter::AbstractVector, exit::AbstractVector, y::AbstractVector,\n   ; kwargs...)\n\n\nKeyword arguments\n\nwts::Vector{<:Real} = similar(enter, 0); vector of case weights (or zero length vector) for each observation\nid::Vector{<:AbstractLSurvivalID} = [ID(i) for i in eachindex(y)]; Vector of AbstractSurvID objects denoting observations that form a single unit (used in bootstrap and jackknife methods)\natol = 0.00000001; absolute tolerance for defining tied event times\nkeepy = true; keep the outcome vector after fitting (may save memory with large datasets)\neps = 0.00000001; deprecated (replaced by atol)\n\nusing LSurvival\nusing Random\nz,x,t,d, event,wt = LSurvival.dgm_comprisk(MersenneTwister(1212), 1000);\nenter = zeros(length(t));\n   # event variable is coded 0[referent],1,2\nm = fit(AJSurv, enter, t, event)\nmw = fit(AJSurv, enter, t, event, wts=wt)\n\nor, equivalently:\n\naalen_johansen(enter, t, event, wts=wt)\n\nSurvival curve estimation using multiple cox models\n\nSignatures\n\n  risk_from_coxphmodels(fitlist::Vector{T}, args...; kwargs...) where {T<:PHModel}\n\n  fit(::Type{M}, fitlist::Vector{T}, ; fitargs...) where {M<:PHSurv,T<:PHModel}\n\nOptional keywords\n\ncoef_vectors = nothing(default) or vector of coefficient vectors from the cox models [will default to the coefficients from fitlist models]\npred_profile = nothing(default) or vector of specific predictor values of the same length as the coef_vectors[1]\n\n using LSurvival\n using Random\n # event variable is coded 0[referent],1,2\n z,x,t,d, event,wt = LSurvival.dgm_comprisk(MersenneTwister(1212), 1000);\n enter = zeros(length(t));\n\n ft1 = coxph(hcat(x,z), enter, t, (event .== 1))\n nidx = findall(event .!= 1)\n ft2 = coxph(hcat(x,z)[nidx,:], enter[nidx], t[nidx], (event[nidx] .== 2))\n\n # risk at referent levels of `x` and `z`\n risk_from_coxphmodels([ft1,ft2])\n\n # risk at average levels of `x` and `z`\n mnx = sum(x)/length(x)\n mnz = sum(z)/length(z)\n # equivalent\n fit(PHSurv, [ft1,ft2], pred_profile=[mnx,mnz])\n risk_from_coxphmodels([ft1,ft2], pred_profile=[mnx,mnz])\n\n\n\n\n\n","category":"method"},{"location":"#StatsAPI.fit-Union{Tuple{T}, Tuple{M}, Tuple{Type{M}, Vector{T}}} where {M<:PHSurv, T<:PHModel}","page":"Help","title":"StatsAPI.fit","text":"Survival curve estimation using multiple cox models\n\nSignatures\n\n  risk_from_coxphmodels(fitlist::Vector{T}, args...; kwargs...) where {T<:PHModel}\n\n  fit(::Type{M}, fitlist::Vector{T}, ; fitargs...) where {M<:PHSurv,T<:PHModel}\n\nOptional keywords\n\ncoef_vectors = nothing(default) or vector of coefficient vectors from the cox models [will default to the coefficients from fitlist models]\npred_profile = nothing(default) or vector of specific predictor values of the same length as the coef_vectors[1]\n\n using LSurvival\n using Random\n # event variable is coded 0[referent],1,2\n z,x,t,d, event,wt = LSurvival.dgm_comprisk(MersenneTwister(1212), 1000);\n enter = zeros(length(t));\n\n ft1 = coxph(hcat(x,z), enter, t, (event .== 1))\n nidx = findall(event .!= 1)\n ft2 = coxph(hcat(x,z)[nidx,:], enter[nidx], t[nidx], (event[nidx] .== 2))\n\n # risk at referent levels of `x` and `z`\n risk_from_coxphmodels([ft1,ft2])\n\n # risk at average levels of `x` and `z`\n mnx = sum(x)/length(x)\n mnz = sum(z)/length(z)\n # equivalent\n fit(PHSurv, [ft1,ft2], pred_profile=[mnx,mnz])\n risk_from_coxphmodels([ft1,ft2], pred_profile=[mnx,mnz])\n\n\n\n\n\n","category":"method"},{"location":"#StatsAPI.fit-Union{Tuple{Y}, Tuple{M}, Tuple{Type{M}, Matrix{<:Real}, Vector{<:Real}, Vector{<:Real}, Y}} where {M<:AbstractPH, Y<:Union{BitVector, Vector{<:Real}}}","page":"Help","title":"StatsAPI.fit","text":"Fit method for AbstractPH objects (Cox models)\n\nKeyword arguments (used here, and passed on to internal structs)\n\nties \"breslow\" or \"efron\" (default)\nwts observation weights\nties \"breslow\" or \"efron\" (default)\noffset not currently used at all\nfitargs arguments passed to other structs, which include\nid cluster or individual level ID (defaults to a unique value for each row of data) see note below on ID\ncontrasts StatsModel style contrasts (dicts) that can be used for variable transformations/indicator variable creation (e.g. https://juliastats.org/StatsModels.jl/stable/contrasts/)\nArguments passed onto fitting routine:\neps (default: Float64 = 1e-9) tolerance for declaring convergence. Model is determined to be converged when relative change in log-partial likelihood is < eps .\ngetbasehaz (default: true): estimate baseline hazard\nstart (default: nothing) nothing, or vector of floats corresponding to initial values for parameters. Note that this defaults to a vector of zeros when set to nothing, and setting to other values invalidates some of the test statistics reported by default with coxph.\nkeepx (default: true) logical. Keep design matrix in AbstractPH object output (set to false for slight computational gain).\nkeepy (default: true)logical.  Keep outcome in AbstractPH object output (set to false for slight computational gain).\nbootstrap_sample (default: false) Fit the model to a bootstrap sample of the data (not generally used by end-users, but provides some convenience toward bootstrap variance estimation).\nbootstrap_rng (default: Random.MersenneTwister()) Random number seed used when drawing a bootstrap sample of the data (not generally used by end-users, but provides some convenience toward bootstrap variance estimation).\nSignatures\n\n  fit(::Type{M},\n  X::AbstractMatrix,#{<:FP},\n  enter::AbstractVector{<:Real},\n  exit::AbstractVector{<:Real},\n  y::Union{AbstractVector{<:Real},BitVector}\n  ;\n  ties =\"breslow\",\n  wts::AbstractVector{<:Real}      = similar(y, 0),\n  offset::AbstractVector{<:Real}   = similar(y, 0),\n  fitargs...) where {M<:AbstractPH}\n\n coxph(f::FormulaTerm, data; kwargs...)\n\n  coxph(X, enter, exit, y, args...; kwargs...)\n\n   using LSurvival, Random\n   z,x,t,d, event,wt = LSurvival.dgm_comprisk(MersenneTwister(1212), 1000);\n   enter = zeros(length(t));\n   X = hcat(x,rand(length(x)));\n    m = fit(PHModel, X, enter, t, d, ties=\"efron\")\n   m2 = fit(PHModel, X, enter, t, d, ties=\"breslow\")\n   coeftable(m)\n\nNote on use of id keyword\n\nid is not needed in person-period structure data for standard estimates or confidence intervals\n\n  using Random, LSurvival\n     id, int, outt, dat =\n         LSurvival.dgm(MersenneTwister(123123), 100, 100; afun = LSurvival.int_0)\n     data = (\n             int = int,\n             outt = outt,\n             d = dat[:,4] .== 1,\n             x = dat[:,1],\n             z = dat[:,2]\n     )\n\n     f = @formula(Surv(int, outt,d)~x+z)\n     coxph(f, data)\n\nBUT, you must specify id to get appropriate robust variance and some other statistics.\n\nHere is an example where the same data are presented in two different ways, which should yield identical statistics when used in Cox model.\n\n dat1 = (\n    time = [1,1,6,6,8,9],\n    status = [1,0,1,1,0,1],\n    x = [1,1,1,0,0,0]\n  )\n  ft = coxph(@formula(Surv(time,status)~x),dat1)\n  bic(ft)\n  nobs(ft)\n  dof_residual(ft)\n  # lrtest is another one\n\n  stderror(ft)                     # model based\n  stderror(ft, type=\"robust\")   # robust standard error, based on dfbeta residuals\n  ft\n\n  # now using \"clustered\" data with multiple observations per individual\n dat1clust= (\n     id = [1,2,3,3,4,4,5,5,6,6],\n     enter = [0,0,0,1,0,1,0,1,0,1],\n     exit = [1,1,1,6,1,6,1,8,1,9],\n     status = [1,0,0,1,0,1,0,0,0,1],\n     x = [1,1,1,1,0,0,0,0,0,0]\n )\n \n # use the `id` parameter with the ID struct\n ft2 = coxph(@formula(Surv(enter, exit, status) ~ x),dat1clust, id=ID.(dat1clust.id))\n bic(ft2)                       # CORRECT        \n nobs(ft2)                      # CORRECT\n dof_residual(ft2)              # CORRECT\n  \n stderror(ft2)                  # model based (CORRECT)\n stderror(ft2, type=\"robust\")   # robust standard error, based on `id` level dfbeta residuals (CORRECT)\n # once robust SE is calculated, coefficient table uses the robust SE for confidence intervals and test statistics\n ft2   # CORRECT (compare to `ft` object)\n\nNOTE THE FOLLOWING IS INCORRECT because the id keyword is omitted\n\n ft2w = coxph(@formula(Surv(enter, exit, status) ~ x),dat1clust)\n bic(ft2w)                          # INCORRECT \n nobs(ft2w)                         # INCORRECT\n dof_residual(ft2w)                 # INCORRECT\n\n stderror(ft2w)                     # model based (CORRECT)\n stderror(ft2w, type=\"robust\")      # robust variance (INCORRECT)\n \n ft2w # the coefficient table now shows incorrect confidence intervals and test statistics\n  \n\n\n\n\n\n","category":"method"},{"location":"#StatsAPI.fit-Union{Tuple{Y}, Tuple{M}, Tuple{Type{M}, Vector{<:Real}, Vector{<:Real}, Y}} where {M<:AJSurv, Y<:Union{BitVector, Vector{<:Real}}}","page":"Help","title":"StatsAPI.fit","text":"Aalen-Johansen estimator for cumulative cause-specific risk (in the presence of competing events)\n\nSignatures\n\n StatsBase.fit!(m::T; kwargs...) where {T<:AbstractNPSurv}\n\n aalen_johansen(enter::AbstractVector, exit::AbstractVector, y::AbstractVector,\n   ; kwargs...)\n\n\nKeyword arguments\n\nwts::Vector{<:Real} = similar(enter, 0); vector of case weights (or zero length vector) for each observation\nid::Vector{<:AbstractLSurvivalID} = [ID(i) for i in eachindex(y)]; Vector of AbstractSurvID objects denoting observations that form a single unit (used in bootstrap and jackknife methods)\natol = 0.00000001; absolute tolerance for defining tied event times\nkeepy = true; keep the outcome vector after fitting (may save memory with large datasets)\neps = 0.00000001; deprecated (replaced by atol)\n\nusing LSurvival\nusing Random\nz,x,t,d, event,wt = LSurvival.dgm_comprisk(MersenneTwister(1212), 1000);\nenter = zeros(length(t));\n   # event variable is coded 0[referent],1,2\nm = fit(AJSurv, enter, t, event)\nmw = fit(AJSurv, enter, t, event, wts=wt)\n\nor, equivalently:\n\naalen_johansen(enter, t, event, wts=wt)\n\n\n\n\n\n","category":"method"},{"location":"#StatsAPI.fit-Union{Tuple{Y}, Tuple{M}, Tuple{Type{M}, Vector{<:Real}, Vector{<:Real}, Y}} where {M<:KMSurv, Y<:Union{BitVector, Vector{<:Real}}}","page":"Help","title":"StatsAPI.fit","text":"Kaplan-Meier estimator for cumulative conditional risk\n\nSignatures\n\nStatsBase.fit!(m::T; kwargs...) where {T<:AbstractNPSurv}\n\nkaplan_meier(enter::AbstractVector, exit::AbstractVector, y::AbstractVector,\n   ; kwargs...)\n\nKeyword arguments\n\nwts::Vector{<:Real} = similar(enter, 0); vector of case weights (or zero length vector) for each observation\nid::Vector{<:AbstractLSurvivalID} = [ID(i) for i in eachindex(y)]; Vector of AbstractSurvID objects denoting observations that form a single unit (used in bootstrap and jackknife methods)\natol = 0.00000001; absolute tolerance for defining tied event times\ncensval = 0;  value of the outcome to be considered a censored event\nkeepy = true; keep the outcome vector after fitting (may save memory with large datasets)\neps = 0.00000001; deprecated (replaced by atol)\n\nusing LSurvival\nusing Random\nz,x,t,d, event,wt = LSurvival.dgm_comprisk(MersenneTwister(1212), 1000);\nenter = zeros(length(t));\nm = fit(KMSurv, enter, t, d)\nmw = fit(KMSurv, enter, t, d, wts=wt)\n\nor, equivalently:\n\nkaplan_meier(enter, t, d, wts=wt)\n\n\n\n\n\n","category":"method"},{"location":"#StatsAPI.loglikelihood-Tuple{M} where M<:AbstractPH","page":"Help","title":"StatsAPI.loglikelihood","text":"Maximum log partial likelihood for a fitted AbstractPH model Efron or Breslow (depending on the ties` parameter)\n\n\n\n\n\n","category":"method"},{"location":"#StatsAPI.loglikelihood-Tuple{M} where M<:PSModel","page":"Help","title":"StatsAPI.loglikelihood","text":"Maximum log likelihood for a fitted PSModel model\n\n\n\n\n\n","category":"method"},{"location":"#StatsAPI.nullloglikelihood-Tuple{M} where M<:AbstractPH","page":"Help","title":"StatsAPI.nullloglikelihood","text":"Null log-partial likelihood for a fitted AbstractPH model Efron or Breslow (depending on the ties` parameter)\n\nNote: this is just the log partial likelihood at the initial values of the model, which default to 0. If initial values are non-null, then this function no longer validly returns the null log-partial likelihood.\n\n\n\n\n\n","category":"method"},{"location":"#StatsAPI.nullloglikelihood-Tuple{M} where M<:PSModel","page":"Help","title":"StatsAPI.nullloglikelihood","text":"Null log-partial likelihood for a fitted PSModel model\n\nNote: this is just the log partial likelihood at the initial values of the model, which default to 0. If initial values are non-null, then this function no longer validly returns the null log-partial likelihood.\n\n\n\n\n\n","category":"method"},{"location":"#StatsAPI.residuals-Tuple{M} where M<:PHModel","page":"Help","title":"StatsAPI.residuals","text":"####################################################################\n\nCox proportional hazards model residuals:\n\nSignature\n\n  residuals(m::M; type = \"martingale\") where {M<:PHModel}\n\nwhere type is one of \n\nmartingale\nschoenfeld\nscore\ndfbeta\njackknife\ndfbetas (scaled dfbeta)\nscaled_schoenfeld or schoenfelds  (scaled Schoenfeld)\nResiduals from the residuals function are designed to exactly emulate those from the survival package in R. Currently, they are validated for single observation data (e.g. one data row per individual).\n####################################################################\nMartingale residuals: Observed versus expected\n\n  # example from https://cran.r-project.org/web/packages/survival/vignettes/validate.pdf\n  # by Terry Therneau\n\n  dat1 = (\n    time = [1,1,6,6,8,9],\n    status = [1,0,1,1,0,1],\n    x = [1,1,1,0,0,0]\n  )\n\n  # Nelson-Aalen type estimator for Breslow partial likelihood\n  ft = coxph(@formula(Surv(time,status)~x),dat1, keepx=true, keepy=true, ties=\"breslow\")\n  residuals(ft, type=\"martingale\")\n\n  dat1 = (\n    time = [1,1,6,6,8,9],\n    status = [1,0,1,1,0,1],\n    x = [1,1,1,0,0,0]\n  )\n\n  # Fleming-Harrington type estimator for Efron partial likelihood\n  ft = coxph(@formula(Surv(time,status)~x),dat1, keepx=true, keepy=true, ties=\"efron\")\n  residuals(ft, type=\"martingale\")\n\n\n####################################################################\n\nScore residuals: Per observation contribution to score function\n\n  using LSurvival\n  dat1 = (\n    time = [1,1,6,6,8,9],\n    status = [1,0,1,1,0,1],\n    x = [1,1,1,0,0,0]\n  )\n  ft = coxph(@formula(Surv(time,status)~x),dat1, keepx=true, keepy=true, ties=\"breslow\")\n  S = residuals(ft, type=\"score\")[:]\n  ft = coxph(@formula(Surv(time,status)~x),dat1, keepx=true, keepy=true, ties=\"efron\", maxiter=0)\n  S = residuals(ft, type=\"score\")[:]\n\n####################################################################\n\nSchoenfeld residuals: Per time contribution to score function\n\n  using LSurvival\n  dat1 = (\n    time = [1,1,6,6,8,9],\n    status = [1,0,1,1,0,1],\n    x = [1,1,1,0,0,0]\n  )\n  ft = coxph(@formula(Surv(time,status)~x),dat1, keepx=true, keepy=true, ties=\"breslow\", maxiter=0)\n\n\n  X = ft.P.X\n  M = residuals(ft, type=\"martingale\")\n  S = residuals(ft, type=\"schoenfeld\")[:]\n  Ss = residuals(ft, type=\"scaled_schoenfeld\")[:]\n\n####################################################################\n\ndfbeta residuals: influence of individual observations on each parameter\n\n  using LSurvival\n  dat1 = (\n    time = [1,1,6,6,8,9],\n    status = [1,0,1,1,0,1],\n    x = [1,1,1,0,0,0]\n  )\n\n  ft = coxph(@formula(Surv(time,status)~x),dat1, ties=\"breslow\")\n  residuals(ft, type=\"dfbeta\")\n\n  # can also calculate from score residuals and Hessian matrix\n  L = residuals(ft, type=\"score\") # n X p\n  H = ft.P._hess   # p X p\n  dfbeta = L*inv(H)\n  robVar = dfbeta'dfbeta\n  sqrt(robVar)\n\n\nusing the id keyword argument\n\nsee help for LSurvival.vcov for what happens when id keyword is not used\n\n  dat1clust= (\n    id = [1,2,3,3,4,4,5,5,6,6],\n    enter = [0,0,0,1,0,1,0,1,0,1],\n    exit = [1,1,1,6,1,6,1,8,1,9],\n    status = [1,0,0,1,0,1,0,0,0,1],\n    x = [1,1,1,1,0,0,0,0,0,0]\n  )\n\n  ft2 = coxph(@formula(Surv(enter, exit, status) ~ x),dat1clust, id=ID.(dat1clust.id), ties=\"breslow\")\n\n  # note these are still on the observation level (not the id level)! \n  residuals(ft2, type=\"dfbeta\")\n\n  # getting id level dfbeta residuals\n  dfbeta = residuals(ft2, type=\"dfbeta\")\n  id = values(ft2.R.id)\n  D = reduce(vcat, [sum(dfbeta[findall(id .== i),:], dims=1) for i in unique(id)])\n  D'D\n  vcov(ft, type=\"robust\")\n  vcov(ft2, type=\"robust\")\n\n####################################################################\n\njackknife residuals: influence of individual observations on each parameter using leave-one-out estimates\n\nnote there are other definitions of jackknife residuals  See Chapter 7.1 of \"Extending the Cox Model\" by Therneau and Grambsch for an example of the type of jackknife residuals used here\n\nJackknife residuals r_i for i in 1n are given as the difference between the maximum partial likelihood estimate and the jackknife estimates for each observation\n\nr_i = hatbeta - hatbeta_(-i)\n\nwhere beta_(-i) is the maximum partial likelihood estimate of the log-hazard ratio vector obtained from a dataset in which observations belonging to individual i are removed\n\n  using LSurvival\n  dat1 = (\n    time = [1,1,6,6,8,9],\n    status = [1,0,1,1,0,1],\n    x = [1,1,1,0,0,0]\n  )\n\n  ft = coxph(@formula(Surv(time,status)~x),dat1, ties=\"breslow\")\n  #jackknife(ft)\n  residuals(ft, type=\"jackknife\")\n\n\n\n\n\n\n\n","category":"method"},{"location":"#StatsAPI.stderror-Tuple{AJSurv}","page":"Help","title":"StatsAPI.stderror","text":"Greenwood's formula for variance and confidence intervals of a Aalen-Johansen risk function\n\nSignatures:\n\nStatsBase.stderror(m::AJSurv)\n\nStatsBase.confint(m:AJSurv; level=0.95, method=\"normal\")\n\nKeyword arguments\n\nmethod\n\"normal\" normality-based confidence intervals\n\"lognlog\" log(-log(S(t))) based confidence intervals\n\nres = z, x, outt, d, event, wts = LSurvival.dgm_comprisk(MersenneTwister(123123), 100)\nint = zeros(length(d)) # no late entry\nm = fit(AJSurv, int, outt, event)\nstderror(m)\nconfint(m, level=0.95)\n\n\n\n\n\n","category":"method"},{"location":"#StatsAPI.stderror-Tuple{KMSurv}","page":"Help","title":"StatsAPI.stderror","text":"Greenwood's formula for variance and confidence intervals of a Kaplan-Meier survival curve\n\nSignatures:\n\nStatsBase.stderror(m::KMSurv)\n\nStatsBase.confint(m:KMSurv; level=0.95, method=\"normal\")\n\nKeyword arguments\n\nmethod:\n\n\"normal\" normality-based confidence intervals\n\"lognlog\" log(-log(S(t))) based confidence intervals\n\nusing LSurvival\nusing Random\nz,x,t,d, event,wt = LSurvival.dgm_comprisk(MersenneTwister(1212), 1000);\nenter = zeros(length(t));\nm = fit(KMSurv, enter, t, d)\nmw = fit(KMSurv, enter, t, d, wts=wt)\nstderror(m)\nconfint(m, method=\"normal\")\nconfint(m, method=\"lognlog\") # log-log transformation\n\n\n\n\n\n","category":"method"},{"location":"#StatsAPI.vcov-Tuple{M} where M<:AbstractPH","page":"Help","title":"StatsAPI.vcov","text":"Covariance matrix for Cox proportional hazards models  \n\nKeyword arguments\n\ntype nothing or \"robust\": determines whether model based or robust (dfbeta based) variance is returned.\nSee ?residuals for info on dfbeta residuals\n\nusing LSurvival\ndat1 = (\n  time = [1,1,6,6,8,9],\n  status = [1,0,1,1,0,1],\n  x = [1,1,1,0,0,0]\n)\nft = coxph(@formula(Surv(time,status)~x),dat1, id=ID.(collect(1:6)))\n\nvcov(ft)                   # model based\nvcov(ft, type=\"robust\")    # robust variance, based on dfbeta residuals\n# once robust SE is calculated, coefficient table uses the robust SE for confidence intervals and test statistics\nft\n\ncluster robust standard errors using the id keyword argument\n\ndat1clust= (\n  id = [1,2,3,3,4,4,5,5,6,6],\n  enter = [0,0,0,1,0,1,0,1,0,1],\n  exit = [1,1,1,6,1,6,1,8,1,9],\n  status = [1,0,0,1,0,1,0,0,0,1],\n  x = [1,1,1,1,0,0,0,0,0,0]\n)\n\nft2 = coxph(@formula(Surv(enter, exit, status) ~ x),dat1clust, id=ID.(dat1clust.id))\n\nvcov(ft2)                     # model based\nvcov(ft2, type=\"robust\")       # robust variance, based on dfbeta residuals\nstderror(ft2, type=\"robust\")   # robust variance, based on dfbeta residuals\nconfint(ft2, type=\"robust\")    # robust variance, based on dfbeta residuals\nnobs(ft2)                     # id argument yields correct value of number of independent observations\n# once robust SE is calculated, coefficient table uses the robust SE for confidence intervals and test statistics\nft2 \n\nNOTE THE FOLLOWING IS INCORRECT because the id keyword is omitted\n\nft2w = coxph(@formula(Surv(enter, exit, status) ~ x),dat1clust)\n\nvcov(ft2w)                   # model based (CORRECT)\nvcov(ft2w, type=\"robust\")    # robust variance (INCORRECT)\nnobs(ft2w)\n\nft2w\n\n\n\n\n\n","category":"method"},{"location":"#Implementation-details-and-further-help","page":"Help","title":"Implementation details and further help","text":"","category":"section"},{"location":"","page":"Help","title":"Help","text":"Pages = [\n    \"Likelihood.md\",\n    \"nonparametric.md\",\n    \"coxmodel.md\",\n    \"parametric.md\",\n    ]\n    Depth = 3","category":"page"},{"location":"Likelihood/#Likelihood-functions-for-time-to-event-observations-subject-to-left-truncation-and-right-censoring","page":"Likelihood functions","title":"Likelihood functions for time-to-event observations subject to left-truncation and right censoring","text":"","category":"section"},{"location":"Likelihood/#Introduction:","page":"Likelihood functions","title":"Introduction:","text":"","category":"section"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"Parametric survival models in LSurvival are parameterized as accelerated failure time models, where model parameters for associations between covariates and survival outcomes are interpreted as changes to the expected life span. The likelihood and parameterization are discussed briefly here to give some sense of the underlying interpretation of the approach, but this discussion is not intended to replace more thorough treatments in survival analysis texts.","category":"page"},{"location":"Likelihood/#Definitions:","page":"Likelihood functions","title":"Definitions:","text":"","category":"section"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"Random variable E: time at beginning of observation\nRandom variable T: time at end of observation\nRandom variable Y: event indicator (1=yes, 0=no)\nRealization e_i: time at study entry for observation i\nRealization t_i: time at study end for observation i\nRealization y_i: event indicator (1=yes, 0=no) for observation i\nRealization mathbfx_i: covariate vector for observation i\nFunction f(t): probability density function evaluated at T=t\nFunction S(t)=Pr(Tt): survival function evaluated at T=t, where S(0)= 1\nFunction mathscrL equivmathscrL(teytheta): likelihood function for observed data under a parametric distribution with parameters theta","category":"page"},{"location":"Likelihood/#Likelihoods-for-survival-data-subject-to-right-censoring-and-left-truncation","page":"Likelihood functions","title":"Likelihoods for survival data subject to right censoring and left truncation","text":"","category":"section"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"We then have that the likelihood for i.i.d. data decomposes as","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"beginaligned\nmathscrL = prod_i mathscrL_i\nmathscrL_i = fracf(t_i)^y_iS(t_i)^(1-y_i)S(e_i)\nendaligned","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"With the log-likelihood (lnmathscrL) given as:","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"beginaligned\nlnmathscrL = lnbigg(prod_i mathscrL_ibigg)\n   = sum_i lnmathscrL_i\nlnmathscrL_i = y_iln f(t_i) + (1-y_i)ln S(t_i) - ln S(e_i)\nendaligned","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"Meaning that the likelihood (and log-likelihood) under a survival model are calculable using the probability density function and the survival function (or natural log-transformations of those function outputs)","category":"page"},{"location":"Likelihood/#Special-case:-person-period-data","page":"Likelihood functions","title":"Special case: person-period data","text":"","category":"section"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"\"Person period data\" allows us to split data from an individual into multiple observations, so that an individual can be right-censored in their first observation and then left-truncated in their second observation at the same time. In this case, the likelihood contribution for individual i (E_i=e_i T_i=t_i, y_i=1) can be split over two person-periods (jin 12), where the first period starts at the entry time of the individual (e_i1 = e_i) is right censored (y_i1=0) since we know the individual survives that period, and the second period includes late-entry immediately after the first period (e_i2=t_i1) and the failure time (y_i2=1, t_i2=t_i), since we know the individual experienced some time at risk before that period and failed within that period. This likelihood decomposition is given as:","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"beginaligned\nmathscrL_i = prod_j mathscrL_ij\n = prod_jfracf(t_ij)^y_ijS(t_ij)^(1-y_ij)S(e_ij) \n = fracf(t_i1)^y_i1S(t_i1)^(1-y_i1)S(e_i1) times fracf(t_i2)^y_i2S(t_i2)^(1-y_i2)S(e_i2)  \n = fracS(t_i1)S(e_ij= e_i) times fracf(t_i2=t_i)^y_i2=y_iS(e_i2=t_i1) =  fracf(t_i)S(e_i)\nendaligned","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"Which is exactly the likelihood we would observe if there were only one observation for this individual. Similar derivations can be made for censored individuals. This phenomena allows that, for example, covariates may differ across person-periods (time-varying covariates), and the general approach to likelihoods for left-truncated, right-censored survival data can readily accomodate this. The LSurvival module takes this general approach to defining the likelihood (and also the partial likelihood in Cox models) and so allows the estimation of effects of time-varying exposures as well as accomodating left truncation and right censoring. ","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"One example of person-period data is shown below. Each circle represents a censoring event, which can occur because an individual survives to the end-of-follow-up, is lost-to-follow-up (individual level) or because they have a person-period that they survive until the end of (period or record level).  (Image: Person-period plot)","category":"page"},{"location":"Likelihood/#Parametric-likelihoods","page":"Likelihood functions","title":"Parametric likelihoods","text":"","category":"section"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"Multiple parametric model forms are available in the LSurvival module. Here, we derive the specific parameterizations used in the module, which uses the location-scale characterization of regression models (also used in the survival package in R).","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"The distributions used here can be parameterized in several ways, and the parameterizations in LSurvival generally follow the \"location-scale\" parameterization. This parameterization allows that covariates are assumed to act in linear combinations on the natural log of the survival time, and a scale parameter (or parameters) influence the error distribution around that linear combination. In symbols, these models are of the form","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"ln(t_i) = mathbfX_ibeta + epsilon_i","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"Where epsilon_i is an error term with a distribution determined by the assumed distribution of the survival times.","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"Traditional parameterizations (e.g. from the Distributions package) and their mapping to the location-scale parameterization are given below. Some distributions that are not yet implemented are included.","category":"page"},{"location":"Likelihood/#Weibull-distribution","page":"Likelihood functions","title":"Weibull distribution","text":"","category":"section"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"Implemented as LSurvival.Weibull()","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"The Weibull distribution can be parameterized as:  beginaligned  f(tlambdagamma)=lambdagamma(lambda t)^gamma-1exp(-(lambda t)^gamma) \nS(tlambdagamma) = exp(-(lambda t)^gamma) endaligned","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"This can be re-parameterized in terms of a 'location-scale' parameterization for modeling of the natural-log of the survival times. ","category":"page"},{"location":"Likelihood/#Derivation:","page":"Likelihood functions","title":"Derivation:","text":"","category":"section"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"Let gamma = exp(-rho) lambda = exp(-alpha) z=fracln(t)-alphaexp(rho) and using t=exp(ln(t)), we have that beginaligned  f(tlambdagamma)=lambdagamma(lambda t)^gamma-1exp(-(lambda t)^gamma) \n=exp(-rho+z-ln(t)-exp(z)) \nln f(talpharho)=   z -exp(z) -rho -ln(t)  \nendaligned","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"And  beginaligned  S(tlambdagamma) = exp(-(lambda t)^gamma)\nS(talpharho)=exp(-(exp(-alpha) exp(ln(t)))^exp(-rho)) \n=exp(-exp(z)) \nln S(talpharho)=-exp(z) \nendaligned","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"Under this parameterization, the hazard function h(talpha rho) can be expressed as","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"beginaligned \nh(talpha rho) = f(talpha rho)S(talpharho)\nln h(talpha rho) =ln f(talpha rho) - ln S(talpharho)\n=  z -exp(z) -rho -ln(t) - (-exp(z)) \n= z -rho -ln(t) \n= ln(t)exp(-rho)-alphaexp(-rho) -rho -ln(t) \nh(talpha rho) =fracexp(alpha)^exp(-rho)t^exp(-rho)-1exp(rho) \nendaligned","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"Under this parameterization, the log likelihood can be defined in terms of the natural log of the survival time, allowing the \"location-scale\" parameterization of a parametric survival model:","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"beginaligned \nz_i = fracln(t_i)-mathbfx_ibetasigma\nln(t_i) = mathbfx_ibeta + sigma z_i\nz sim D\nendaligned","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"Where the location parameter is given as alpha = mathbfxbeta and the scale parmameter sigma=exp(rho) describes the magnitude of the error terms, whose distribution is D (e.g. in the case of the Weibull distribution for t (given mathbf X), D is the extreme value distribution). Here, the association between covariates mathbfX and the time-to-event outcome is characterized in terms of linear effects on the location parameter alpha. Further details and interpretive assistance can be found in Kalbfleisch and Prentice.[kf]","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"Under this model, we note that the ratio of predicted times under mathbfX=x and mathbfX=x, denoted by T_mathbf x and T_mathbf x, respectively, is given as","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"beginaligned \nfracT_mathbf xT_mathbf x = fracexp(alpha_mathbf x)exp(alpha_mathbf x) \n= fracexp(mathbfxbeta)exp(mathbfxbeta) \n= exp((mathbfx-mathbfx)beta) \nendaligned","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"So that a unit change in the predictor leads to a relative change in the survival time of exp(beta) units. This \"time ratio\" can also be interpreted as the acceleration of the lifetime, hence this parametererization being labeled as an \"accelerated failure time\" model.","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"Under the Weibull distribution, the hazard ratio is given as","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"beginaligned \nfrach_mathbf x(tlambdagamma)h_mathbf x(tlambdagamma) =fracexp(alpha_mathbf x)^exp(-rho)exp(alpha_mathbf x)^exp(-rho) \n=fracexp( -mathbfxbetaexp(-rho))exp( -mathbfxbetaexp(-rho)) \n= exp((mathbfx-mathbfx)betaexp(-rho)) \nendaligned","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"Which is proportional to the inverse of the time ratio, meaning that a predictor that proportionally increases the hazard of Y also proportionally decreases the survival time. For the Weibull (and exponential) distribution hazard ratio can be derived from the AFT model by simply exponentiating the negative value of the AFT parameters divided by the model scale parameter (e.g. exp(-betaexp(-rho)), which reduces to exp(-beta) in the Exponential model)","category":"page"},{"location":"Likelihood/#Exponential-distribution","page":"Likelihood functions","title":"Exponential distribution","text":"","category":"section"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"Implemented as LSurvival.Exponential()","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"This is a special case of the Weibull log-likelihood in which gamma=1 (or, equivalently rho=0)","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"beginaligned \nf(t)=lambdaexp(-lambda t) \nS(t) = exp(-lambda t)\nendaligned","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"Then, again letting lambda = exp(-alpha) and using t=exp(ln(t)), we have that","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"beginaligned \nln f(t)=  alpha - exp(ln(t) - alpha) \nln S(t)=-exp(ln(t) - alpha) \nendaligned","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"which gives us the model","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"beginaligned \nln(t_i) = mathbfx_ibeta + epsilon_i \nepsilon sim D\nendaligned","category":"page"},{"location":"Likelihood/#Log-normal-distribution","page":"Likelihood functions","title":"Log-normal distribution","text":"","category":"section"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"Implemented as LSurvival.Lognormal()","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"Let gamma = exp(-rho) lambda = exp(-alpha) z=fracln(t)-alphaexp(rho) and using t=exp(ln(t)), we have that","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"beginaligned \nf(tlambdagamma)=(2pi)^-12gamma t^-1 expbigg(frac-gamma^2(ln(lambda t))^22   bigg) \nf(talpharho)=(2pi)^-12exp(-rho) exp(ln(t))^-1 expbigg(frac-exp(-rho)^2(ln(exp(-alpha) exp(ln(t))))^22   bigg) \n=(2pi)^-12 expbig(-z^22 - ln(t) - rho big) \n\n\nS(tlambdagamma) = 1 - Phibig(gamma ln(lambda t)big)\nS(talpharho) = 1 - Phibig(zbig)\nendaligned","category":"page"},{"location":"Likelihood/#Generalized-Gamma-distribution","page":"Likelihood functions","title":"Generalized Gamma distribution","text":"","category":"section"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"Implemented as LSurvival.GGamma()","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"Limiting cases:","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"Weibull (k=1)\nGamma (gamma=1)\nLog-normal (as krightarrow infty)\nExponential (gamma=k=1)","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"Let gamma = exp(-rho) lambda = exp(-alpha) k=exp(kappa) z=fracln(t)-alphaexp(rho) and using t=exp(ln(t)), we have that","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"beginaligned \n\nf(tlambdagammak)=fracgammalambda(lambda t)^gamma k - 1exp(-(lambda t)^gamma)Gamma(k)\nf(talpharhokappa)=fracexp(-rho)exp(-alpha)(exp(-alpha) exp(ln(t)))^exp(-rho) exp(kappa) - 1exp(-(exp(-alpha) exp(ln(t)))^exp(-rho))Gamma(exp(kappa))\n=fracexp(-alpha)exp((ln(t)-alpha)(exp(-rho) exp(kappa) - 1))-rho)exp(- exp((ln(t)-alpha)exp(-rho))))Gamma(exp(kappa))\n=fracexp(z exp(kappa)-alpha - ln(t)+alpha-rho-exp(z))Gamma(exp(kappa))\nln f(talpharhokappa)=zexp(kappa)-exp(z)-rho -ln(t) - lnGamma(exp(kappa))\nendaligned","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"and","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"beginaligned \nS(tlambdagammak)=1-I(k(lambda t)^gamma)\nS(talpharhokappa)=1-I( exp(kappa)exp(ln(t)-alpha)^exp(-rho))\nln S(talpharhokappa)=ln(1-I(exp(kappa)) exp(z))\nendaligned","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"Where we define I(ks) as the upper incomplete gamma function ratio given by","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"I(ks) = fracint_o^s t^k-1exp(-t)dtGamma(k)","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"(see gamma_inc function from SpecialFunctions.jl)","category":"page"},{"location":"Likelihood/#Gamma-distribution","page":"Likelihood functions","title":"Gamma distribution","text":"","category":"section"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"Implemented as LSurvival.Gamma()","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"Let gamma = exp(-rho) lambda = exp(-alpha) k=exp(kappa) z=fracln(t)-alphaexp(rho) and using t=exp(ln(t)), we have that","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"Then Gamma distribution can be parameterized as beginaligned  f(tlambdak)= fraclambda(lambda t)^k-1exp(lambda t)Gamma(k)\nln f(talphakappa)=ln(t)(exp(kappa)-1)-alphaexp(kappa)-exp(ln(t)-alpha)  - lnGamma(exp(kappa))\n\nS(tlambdak)= 1-I(klambda t)\nln S(talphakappa)=ln(1-I(exp(kappa)) exp(ln(t)-alpha))\nendaligned","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"Where we define I(ks) as the upper incomplete gamma function ratio given by","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"I(ks) = fracint_o^s t^k-1exp(-t)dtGamma(k)","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"(see gamma_inc function from SpecialFunctions.jl)","category":"page"},{"location":"Likelihood/#Log-logistic-distribution","page":"Likelihood functions","title":"Log-logistic distribution","text":"","category":"section"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"(not yet implemented)","category":"page"},{"location":"Likelihood/#Semi-parametric-partial-likelihoods","page":"Likelihood functions","title":"Semi-parametric partial likelihoods","text":"","category":"section"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"In the Cox model, the partial-likelihoods are used in place of the likelihood function. These models are are modeled directly in terms of hazard ratios, allowing that the baseline hazard can be an arbitrary distribution. The Cox models implemented here are semi-parametric because they include a combination of parametric (hazard ratios) and non-parametric (baseline hazard) components. Cox's original likelihood is used here, and, in place of tied survival times, two different options are implemented for addressing ties. See the survival[surv] package vignette for original citations and methods for baseline hazard and partial-likelihood calculations.","category":"page"},{"location":"Likelihood/#Efron's-partial-likelihood","page":"Likelihood functions","title":"Efron's partial likelihood","text":"","category":"section"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"This is the default in coxph (documentation in progress)","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"Baseline hazard calculations are made using an analogue of the Fleming-Harrington estimator.","category":"page"},{"location":"Likelihood/#Breslow's-partial-likelihood","page":"Likelihood functions","title":"Breslow's partial likelihood","text":"","category":"section"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"Documentation in progress","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"Baseline hazard calculations are made using an analogue of the Nelson-Aalen estimator. ","category":"page"},{"location":"Likelihood/#Time-varying-covariates","page":"Likelihood functions","title":"Time-varying covariates","text":"","category":"section"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"Documentation in progress","category":"page"},{"location":"Likelihood/#Numerical-algorithms","page":"Likelihood functions","title":"Numerical algorithms","text":"","category":"section"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"Fitting algorithms include direct calculation, hard-coded Newton-Raphson algorithms, and optimization algorithms from the Optim.jl module:","category":"page"},{"location":"Likelihood/#Non-parametric-analysis","page":"Likelihood functions","title":"Non-parametric analysis","text":"","category":"section"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"Kaplan-Meier: direct calculation\nAalen-Johansen: direct calculation","category":"page"},{"location":"Likelihood/#Semi-parametric-analysis","page":"Likelihood functions","title":"Semi-parametric analysis","text":"","category":"section"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"Cox model, Efron's partial likelihood: Newton-Raphson with analytic gradient and Hessian, utilizing step-halving if the infinite norm of the gradient increases in a step.  \nCox model, Breslow's partial likelihood: Newton-Raphson with analytic gradient and Hessian, utilizing step-halving if the infinite norm of the gradient increases in a step. ","category":"page"},{"location":"Likelihood/#Parametric-analysis","page":"Likelihood functions","title":"Parametric analysis","text":"","category":"section"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"AFT model (Weibull, Exponential, Log-normal): BFGS algorithm from Optim.jl, supplemented with analytic gradient and Hessian using a Hager-Zhang line-search algorithm and static scaling of the P matrix\nAFT model (Gamma, Generalized gamma): BFGS algorithm from Optim.jl utilizing forward differencing to calculate gradient and approximate Hessian using a quadratic backtracking line-search algorithm with an initial quadratic approximation for scaling the P matrix","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"[kf]: Kalbfleisch, J. D., & Prentice, R. L. (2011). The statistical analysis of failure time data, 2nd ed. John Wiley & Sons.","category":"page"},{"location":"Likelihood/","page":"Likelihood functions","title":"Likelihood functions","text":"[surv]: https://cran.r-project.org/web/packages/survival/vignettes/validate.pdf","category":"page"}]
}
